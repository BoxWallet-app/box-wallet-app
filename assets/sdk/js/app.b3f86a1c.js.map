{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/components/Wallet.vue","webpack:///./src/components/Wallet.vue?74bf","webpack:///./src/contract/ABCLockV3Contract.js","webpack:///./src/contract/FungibleTokenFullContract.js","webpack:///./src/contract/BoxSwapContractV2.js","webpack:///./src/components/Wallet.vue?f042","webpack:///./src/components/Wallet.vue?8661","webpack:///./src/main.js","webpack:///./src/components/Wallet.vue?7e6b"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticStyle","on","$event","getMnemonicCFX","_v","getSecretKeyCFX","getBalanceCFX","getSecretPrivateCFX","signTransactionCFX","signTypeTransactionCFX","getNameToAddressCFX","getAddressToNameCFX","toFormatCfx","getGasCfx","spendCFX","spendCFXERC20","balanceCFXERC20","getSecretKeyETH","getSecretPrivateETH","getBalanceETH","spendETHERC20","spendETH","balanceETHERC20","getGasEth","signTransactionETH","getBalanceAE","balanceAEX9","aeDecodePayload","staticRenderFns","ABCLockContractV3","FungibleTokenFullContract","BoxSwapContractV2","isSDk","isAccept","url","sourceUrl","secretKey","publicKey","component","Vue","config","productionTip","render","h","App","$mount"],"mappings":"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","file":"js/app.b3f86a1c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","<template>\n    <!--          <iframe ref=\"iframe\" :src=\"url\"  id=\"ifrmid\" width=\"100%\" height=\"100%\">-->\n\n    <!--          </iframe>-->\n    <div style=\"line-height: 40px\">\n\n        <button v-on:click=\"getMnemonicCFX()\">\n            getMnemonicCFX\n        </button>\n        <br/>\n        <button v-on:click=\"getSecretKeyCFX('memory pool equip lesson limb naive endorse advice lift result track gravity')\">\n            getSecretKeyCFX\n        </button>\n\n        <br/>\n        <button v-on:click=\"getBalanceCFX('cfx:aar29zsp36tg62pjk0yd66tw1t7cyvbu3e4bkak51w')\">\n            getBalanceCFX\n        </button>\n        <br/>\n\n        <button v-on:click=\"getSecretPrivateCFX('')\">\n            getSecretPrivateCFX\n        </button>\n        <br/>\n        <button v-on:click=\"signTransactionCFX('','64','44948','1000000000','0','cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7','0x095ea7b300000000000000000000000087bfd2e93c168a0685ebe4afda95108d92a3fa6fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\">\n            signTransactionCFX\n        </button>\n        <br/>\n        <button v-on:click=\"signTypeTransactionCFX('','eyJ0eXBlcyI6eyJFSVA3MTJEb21haW4iOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoic3RyaW5nIn0seyJuYW1lIjoiY2hhaW5JZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoidmVyaWZ5aW5nQ29udHJhY3QiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwiUGVybWl0IjpbeyJuYW1lIjoib3duZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InNwZW5kZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InZhbHVlIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJub25jZSIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiZGVhZGxpbmUiLCJ0eXBlIjoidWludDI1NiJ9XX0sImRvbWFpbiI6eyJuYW1lIjoiTW9vblN3YXAgTFAgVG9rZW4iLCJ2ZXJzaW9uIjoiMSIsImNoYWluSWQiOjEwMjksInZlcmlmeWluZ0NvbnRyYWN0IjoiMHg4RDU0NTExOEQ5MUMwMjdDODA1YzU1MmY2M0E1YzAwYTIwYUU2QWNhIn0sInByaW1hcnlUeXBlIjoiUGVybWl0IiwibWVzc2FnZSI6eyJvd25lciI6IjB4MTBhMDhlRDdFQ2YwMzk1YmEzOTg1NkU5NmNDZDY4QjQ2MThGNUU2MCIsInNwZW5kZXIiOiIweDgwYWU2YTg4Y2UzMzUxZTlmNzI5ZTgxOTlmMjg3MWJhNzg2YWQ3YzUiLCJ2YWx1ZSI6IjE1MTUxMTA3NjgzNjY3MTc3MiIsIm5vbmNlIjoiMHgwMCIsImRlYWRsaW5lIjoxNjMxNzY1MDkzfX0=\\n')\">\n            signTypeTransactionCFX\n        </button>\n        <br/>\n        <button v-on:click=\"getNameToAddressCFX('heisenberg.cfx')\">\n            getNameToAddressCFX\n        </button>\n        <br/>\n        <button v-on:click=\"getAddressToNameCFX('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts')\">\n            getAddressToNameCFX\n        </button>\n        <br/>\n        <button v-on:click=\"toFormatCfx(0x2dbbf8b6694bbe8bc)\">\n            toFormatCfx\n        </button>\n        <br/>\n        <button v-on:click=\"getGasCfx('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts','cfx:acam64yj323zd4t1fhybxh3jsg7hu4012yz9kakxs9','0xde0b6b3a7640000','0x5c35083800000000000000000000000000000000000000000000058b918ceb984e0de83a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000010a08ed7ecf0395ba39856e96ccd68b4618f5e600000000000000000000000000000000000000000000000000000000061373df600000000000000000000000000000000000000000000000000000000000000040000000000000000000000008d7df9316faa0586e175b5e6d03c6bda76e3d9500000000000000000000000008b8689c7f3014a4d86e4d1d0daaf74a47f5e0f2700000000000000000000000086d2fb177eff4be03a342951269096265b98ac4600000000000000000000000086424aa36e451e9e22be123933a6ad1c801275fa')\">\n            getGasCfx\n        </button>\n        <br/>\n        <button v-on:click=\"spendCFX('','cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf','0.001')\">\n            spendCFX\n        </button>\n        <br/>\n        <button v-on:click=\"spendCFXERC20('','cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf','cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7','0')\">\n            spendCFXERC20\n        </button>\n        <br/>\n        <button v-on:click=\"balanceCFXERC20('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts','cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2')\">\n            balanceCFXERC20\n        </button>\n\n        <br/>\n        <br/>\n        <br/>\n        <button v-on:click=\"getSecretKeyETH('memory pool equip lesson limb naive endorse advice lift result track gravity')\">\n            getSecretKeyETH\n        </button>\n        <br/>\n\n        <button v-on:click=\"getSecretPrivateETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e')\">\n            getSecretPrivateETH\n        </button>\n\n        <br/>\n        <button v-on:click=\"getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','OKT','https://exchainrpc.okex.org/')\">\n            getBalanceETH OK\n        </button>\n        <button v-on:click=\"getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','BSC','https://bsc-dataseed4.ninicoin.io/')\">\n            getBalanceETH BSC\n        </button>\n        <button v-on:click=\"getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','HT','https://http-mainnet.hecochain.com/')\">\n            getBalanceETH HT\n        </button>\n\n\n        <br/>\n        <button v-on:click=\"spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2','0','100000000','https://exchainrpc.okex.org/')\">\n            spendETHERC20 OK\n        </button>\n        <button v-on:click=\"spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0x2859e4544c4bb03966803b044a93563bd2d0dd4d','0','5355000000','https://bsc-dataseed4.ninicoin.io/')\">\n            spendETHERC20 BSC\n        </button>\n        <button v-on:click=\"spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2','0','2777777777','https://http-mainnet.hecochain.com/')\">\n            spendETHERC20 HT\n        </button>\n\n        <br/>\n        <button v-on:click=\"spendETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0.00001','100000000','https://exchainrpc.okex.org/')\">\n            spendETH OK\n        </button>\n        <button v-on:click=\"spendETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0.00001','6120000000','https://bsc-dataseed4.ninicoin.io/')\">\n            spendETH BSC\n        </button>\n        <button v-on:click=\"spendETH('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','9999999999','2500000000','https://heco.mytokenpocket.vip')\">\n            spendETH HT\n        </button>\n        <br/>\n        <button v-on:click=\"balanceETHERC20('0x838a7A7f3e16117763C109d98C79ddCd69F6FD6e','0x382bb369d343125bfb2117af9c149795c6c65c50','OKT','https://exchainrpc.okex.org/')\">\n            balanceETHERC20 OK\n        </button>\n        <button v-on:click=\"balanceETHERC20('0xefdca55e4bce6c1d535cb2d0687b5567eef2ae83','0x55d398326f99059ff775485246999027b3197955','BSC','https://bsc-dataseed4.ninicoin.io/')\">\n            balanceETHERC20 BSC\n        </button>\n        <button v-on:click=\"balanceETHERC20('0xf977814e90da44bfa03b6295a0616a897441acec','0xa71edc38d189767582c38a3145b5873052c3e47a','HT','https://http-mainnet.hecochain.com/')\">\n            balanceETHERC20 HT\n        </button>\n        <br/>\n        <button v-on:click=\"getGasEth(\n        '',\n        '0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2',\n        '',\n        '0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        'https://exchainrpc.okex.org/')\">\n            getGasEth\n        </button>\n        <br/>\n\n        <button v-on:click=\"signTransactionETH(\n        '',\n        '140871',\n        '276000000',\n        '0',\n        '0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2',\n        '0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        'https://exchainrpc.okex.org/')\">\n            signTransactionETH\n        </button>\n        <br/>\n\n        <br/>\n\n        <br/>\n        <br/>\n        <button v-on:click=\"getBalanceAE('ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF')\">\n            getBalanceAE\n        </button>\n\n        <br/>\n        <button v-on:click=\"balanceAEX9('ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF','ct_7UfopTwsRuLGFEcsScbYgQ6YnySXuyMxQWhw6fjycnzS5Nyzq')\">\n            balanceAEx9\n        </button>\n        <br/>\n\n        <button v-on:click=\"aeDecodePayload('U3BvbnNvcmVkIGJ5IENoaW5hIEZvdW5kYXRpb27vvIjkuK3lm73ln7rph5HkvJrotZ7liqnvvImr+EQO')\">\n            aeDecodePayload\n        </button>\n    </div>\n\n</template>\n<script>\n    import {RpcWallet, AmountFormatter, HdWallet, MemoryAccount, Node, Universal} from '@aeternity/aepp-sdk/'\n    import {ABCLockContractV3} from '../contract/ABCLockV3Contract'\n    import {FungibleTokenFullContract} from '../contract/FungibleTokenFullContract'\n    import {BoxSwapContractV2} from '../contract/BoxSwapContractV2'\n    import BrowserWindowMessageConnection\n        from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message'\n    // import * as bitcoin from 'bitcoinjs-lib'\n    import {Conflux, Drip} from 'js-conflux-sdk';\n    import {Base64} from 'js-base64';\n\n    const {abi} = require('../contract/erc20_contract.json');\n    const REGISTRY_ABI = require('../contract/registry.json');\n    const RESOLVER_ABI = require('../contract/resolver.json');\n    const hdkey = require(\"@cfxjs/hdkey\");\n    const namehash = require('eth-ens-namehash');\n    const ethers = require('ethers');\n\n    let NODE_URL = 'https://node.aeasy.io/';\n    let NODE_INTERNAL_URL = 'https://debug.aeasy.io';\n    let COMPILER_URL = 'https://compiler.aeasy.io/';\n    let CFX_NODE_URL = 'https://main.confluxrpc.com';\n\n    let tempAction;\n    let sign = \"===========================\";\n    let isSDk = true;\n\n\n    function sleep(delay) {\n        const start = (new Date()).getTime();\n        while ((new Date()).getTime() - start < delay) {\n            continue;\n        }\n    }\n\n    export default {\n        name: 'HelloWorld',\n        props: {\n            msg: String\n        },\n        data() {\n            return {}\n        },\n\n        mounted: function () {\n            // console.log(this.init());\n            // document.write(parent);\n            // async function btcGenerateAccount() {\n            //     const myNetwork = await bitcoin.networks.bitcoin\n            //     // const mnemonic = await bip39.generateMnemonic()\n            //     const mnemonic = \"salon annual excuse smoke clinic donor rifle census double expect glue field\"\n            //     const seed = await bip39.mnemonicToSeed(mnemonic)\n            //     const root = await bip32.fromSeed(seed, myNetwork)\n            //     const path = \"m/44'/0'/0'/0/0\"\n            //\n            //     const keyPair = root.derivePath(path)\n            //     const privateKey = keyPair.toWIF()\n            //     // const publicKey = keyPair.publicKey.toString(\"hex\")\n            //     let address = getAddress(keyPair, myNetwork)\n            //     // let segWitAddress = getSegWitAddress(keyPair, myNetwork)\n            //\n            //     console.log(\"BTC 助记词 = \" + mnemonic);\n            //     console.log(\"BTC 私钥 = \" + privateKey);\n            //     // console.log(\"BTC 私钥 HEX= \" + publicKey);\n            //     console.log(\"BTC 普通地址 = \" + address);\n            //     // console.log(\"BTC 隔离见证地址 = \" + segWitAddress);\n            // }\n\n            // async function btcGenerateSegWigAccount() {\n            //     const myNetwork = await bitcoin.networks.bitcoin\n            //     // const mnemonic = await bip39.generateMnemonic()\n            //     const mnemonic = \"salon annual excuse smoke clinic donor rifle census double expect glue field\"\n            //     const seed = await bip39.mnemonicToSeed(mnemonic)\n            //     const root = await bip32.fromSeed(seed, myNetwork)\n            //     const path = \"m/49'/0'/0'/0/0\"\n            //\n            //     const keyPair = root.derivePath(path)\n            //     const privateKey = keyPair.toWIF()\n            //     // const publicKey = keyPair.publicKey.toString(\"hex\")\n            //     // let address = getAddress(keyPair, myNetwork)\n            //     let segWitAddress = getSegWitAddress(keyPair, myNetwork)\n            //\n            //     console.log(\"BTC 助记词 = \" + mnemonic);\n            //     console.log(\"BTC 私钥 = \" + privateKey);\n            //     // console.log(\"BTC 私钥 HEX= \" + publicKey);\n            //     // console.log(\"BTC 普通地址 = \" + address);\n            //     console.log(\"BTC 隔离见证地址 = \" + segWitAddress);\n            // }\n\n\n            // async function btcTransaction() {\n            //     let NETWORK = bitcoin.networks.testnet;\n            //     const quantitySat = 0.0001 * 1e8;\n            //     const feeSat = 0.0001 * 1e8;\n            //     const keyPair = bitcoin.ECPair.fromWIF('cQDgPKu3hsT8UVG9pwPArC5SXuWHy2VZuq3pQXqdtA5BVvg4Zw4c', NETWORK);\n            //     const p2pkh = bitcoin.payments.p2pkh({pubkey: keyPair.publicKey, network: NETWORK});\n            //     let from = p2pkh.address;\n            //     let toAddress = \"mkbRYhjr5v8MHpqUsKW8skgCGz7oUBSmu5\";\n            //     console.log(\"BTC 地址 = \" + from);\n            //\n            //     const utxoResponse = await fetch(`https://testnet.blockchain.info/rawaddr/${from}`);\n            //     let balance = utxoResponse.data.final_balance;\n            //     let latestTx = utxoResponse.data.txs[0].hash;\n            //     console.log('testAddress balance:', balance);\n            //     console.log('latest tx: ', latestTx);\n            //     // 构建交易对象\n            //     let txb = new bitcoin.TransactionBuilder(NETWORK);\n            //\n            //     txb.addInput(latestTx, 1);\n            //     // 转出账户\n            //     txb.addOutput(toAddress, quantitySat);\n            //     // 预留手续费\n            //     txb.addOutput(from, balance - quantitySat - feeSat);\n            //\n            //     var data = new Buffer(\"Hello Aeternal HyperChain. -- Baixin\")\n            //     var ret = bitcoin.script.compile(\n            //         [\n            //             bitcoin.opcodes.OP_RETURN,\n            //             data\n            //         ]);\n            //     txb.addOutput(ret, 0);\n            //     // 批量签名，根据索引即可\n            //     txb.sign(0, keyPair);\n            //     let tx = txb.build();\n            //     console.log(tx);\n            //     console.log(tx.getHash().toString('hex'));\n            //     //\n            //     //在一个测试链的节点把交易广布出去\n            //     const result = await fetch('https://api.blockcypher.com/v1/btc/test3/txs/push', {\n            //         method: 'post',\n            //         headers: {'Content-Type': 'application/json'},\n            //         body: JSON.stringify({tx: tx.toHex()})\n            //     });\n            //     console.log(result);\n            //\n            // }\n\n\n            // async function dogeGenerateAccount() {\n            //     // let account =await tronweb.createAccount();\n            //     // console.log(\"TRX 助记词 = \" + mnemonic);\n            //     // console.log(\"TRX 私钥 = \" + key1.toWIF().toString('hex'));\n            //     // console.log(\"TRX 地址 = \" + baddress.toBase58Check(bcrypto.hash160(key1.publicKey), NETWORKS.bitcoin.pubKeyHash));\n            // }\n\n\n            //TODO ETH BSC OKT HT\n            window['getBalanceETH'] = (address, coin,network) => {\n                this.getBalanceETH(address, coin,network);\n            };\n\n            window['spendETHERC20'] = (privateKey, toAddress, ctAddress, value, gasPrice, network) => {\n                this.spendETHERC20(privateKey, toAddress, ctAddress, value, gasPrice, network);\n            };\n\n            window['spendETH'] = (privateKey, toAddress, value, gasPrice, network) => {\n                this.spendETH(privateKey, toAddress, value, gasPrice, network);\n            };\n\n            window['getSecretKeyETH'] = (mnemonic) => {\n                this.getSecretKeyETH(mnemonic);\n            };\n\n            window['getSecretPrivateETH'] = (privateKey) => {\n                this.getSecretPrivateETH(privateKey);\n            };\n\n\n            window['balanceETHERC20'] = (address, ctAddress,coin,network) => {\n                this.balanceETHERC20(address, ctAddress, coin,network);\n            };\n\n            window['getGasEth'] = (from, to, value, data,network) => {\n                this.getGasEth(from, to, value, data,network);\n            };\n\n            window['signTransactionETH'] = (privateKey, gasLimit, gasPrice, value, toAddress, data,network) => {\n                this.signTransactionETH(privateKey, gasLimit, gasPrice, value, toAddress, data,network);\n            };\n\n            window['signTypeTransactionETH'] = (privateKey, data,network) => {\n                this.signTypeTransactionETH(privateKey, data,network);\n            };\n\n            //TODO CFX\n            window['getMnemonicCFX'] = () => {\n                this.getMnemonicCFX();\n            };\n\n            window['balanceCFXERC20'] = (address, ctAddress) => {\n                this.balanceCFXERC20(address, ctAddress);\n            };\n            window['getGasCfx'] = (from, to, value, data) => {\n                this.getGasCfx(from, to, value, data);\n            };\n\n            window['getSecretKeyCFX'] = (mnemonic) => {\n                this.getSecretKeyCFX(mnemonic);\n            };\n\n            window['getSecretPrivateCFX'] = (privateKey) => {\n                this.getSecretPrivateCFX(privateKey);\n            };\n\n            window['getBalanceCFX'] = (address) => {\n                this.getBalanceCFX(address);\n            };\n\n            window['toFormatCfx'] = (amount) => {\n                this.toFormatCfx(amount);\n            };\n\n            window['spendCFX'] = (secretKey, toAddress, amount) => {\n                this.spendCFX(secretKey, toAddress, amount);\n            };\n\n            window['spendCFXERC20'] = (secretKey, toAddress, ctAddress, amount) => {\n                this.spendCFXERC20(secretKey, toAddress, ctAddress, amount);\n            };\n\n\n            window['signTransactionCFX'] = (secretKey, storageLimit, gas, gasPrice, value, to, data) => {\n                this.signTransactionCFX(secretKey, storageLimit, gas, gasPrice, value, to, data);\n            };\n\n            window['signTypeTransactionCFX'] = (secretKey, data) => {\n                this.signTypeTransactionCFX(secretKey, data);\n            };\n\n            window['getNameToAddressCFX'] = (domain) => {\n                this.getNameToAddressCFX(domain);\n            };\n\n            window['getAddressToNameCFX'] = (address) => {\n                this.getAddressToNameCFX(address);\n            };\n\n\n            //TODO AE\n\n            window['aeDecodePayload'] = (source) => {\n                this.aeDecodePayload(source);\n            };\n\n            window['getBalanceAE'] = (address) => {\n                this.getBalanceAE(address);\n            };\n\n            window['balanceAEX9'] = (address, ctAddress) => {\n                this.balanceAEX9(address, ctAddress);\n            };\n            window['getMnemonic'] = () => {\n                this.getMnemonic();\n            };\n            window['spend'] = (secretKey, publicKey, receiveID, amount, payload) => {\n                this.spend(secretKey, publicKey, receiveID, amount, payload);\n            };\n            window['sign'] = (isAccept, sign) => {\n                this.sign(isAccept, sign);\n            };\n            window['setNodeCompilerUrl'] = (node, compiler) => {\n                this.setNodeCompilerUrl(node, compiler);\n            };\n            window['setCfxNodeUrl'] = (node) => {\n                this.setCfxNodeUrl(node);\n            };\n            window['getSecretKey'] = (mnemonic) => {\n                this.getSecretKey(mnemonic);\n            };\n            window['validationMnemonic'] = (mnemonic) => {\n                this.validationMnemonic(mnemonic);\n            };\n            window['updateName'] = (secretKey, publicKey, name, pointData) => {\n                this.updateName(secretKey, publicKey, name, pointData);\n            };\n            window['bidName'] = (secretKey, publicKey, name, nameFee) => {\n                this.bidName(secretKey, publicKey, name, nameFee);\n            };\n            window['claimName'] = (secretKey, publicKey, name) => {\n                this.claimName(secretKey, publicKey, name);\n            };\n            window['transferName'] = (secretKey, publicKey, name, address) => {\n                this.transferName(secretKey, publicKey, name, address);\n            };\n            window['contractDefiV3Lock'] = (secretKey, publicKey, ctId, amount) => {\n                this.contractDefiV3Lock(secretKey, publicKey, ctId, amount);\n            };\n            window['contractDefiV3UnLock'] = (secretKey, publicKey, ctId) => {\n                this.contractDefiV3UnLock(secretKey, publicKey, ctId);\n            };\n            window['contractDefiV3Benefits'] = (secretKey, publicKey, ctId) => {\n                this.contractDefiV3Benefits(secretKey, publicKey, ctId);\n            };\n            window['contractTransfer'] = (secretKey, publicKey, ctId, receiveID, amount) => {\n                this.contractTransfer(secretKey, publicKey, ctId, receiveID, amount);\n            };\n            window['contractSwapSell'] = (secretKey, publicKey, swapCtId, ctId, count, amount, allowance) => {\n                this.contractSwapSell(secretKey, publicKey, swapCtId, ctId, count, amount, allowance);\n            };\n            window['contractSwapBuy'] = (secretKey, publicKey, swapCtId, ctId, accountAddress, amount) => {\n                this.contractSwapBuy(secretKey, publicKey, swapCtId, ctId, accountAddress, amount);\n            };\n            window['contractSwapCancel'] = (secretKey, publicKey, swapCtId, ctId) => {\n                this.contractSwapCancel(secretKey, publicKey, swapCtId, ctId);\n            };\n            window['initWallet'] = (secretKey, publicKey, sourceUrl) => {\n                this.initWallet(secretKey, publicKey, sourceUrl);\n            };\n        },\n        methods: {\n\n            toFormatCfx: async function (amount) {\n                if (!isSDk) {\n                    console.log(AmountFormatter.toAe(amount.toString(10)));\n\n                } else {\n                    // eslint-disable-next-line no-undef\n                    toFormatCfx_JS.postMessage(AmountFormatter.toAe(amount.toString(10)));\n                }\n\n            },\n\n            getGasCfx: async function (from, to, value, data) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    let object = await cfx.estimateGasAndCollateral(\n                        {\n                            from: from,\n                            to: to,\n                            value: value,\n                            data: data,\n                        },\n                    );\n                    if (!isSDk) {\n                        console.log(object['gasLimit'].toString(10));\n                        console.log(object['gasUsed'].toString(10));\n                        console.log(object['storageCollateralized'].toString(10));\n                        console.log(object);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getGasCfx_JS.postMessage(object['gasLimit'].toString(10) + \"#\" + object['gasUsed'].toString(10) + \"#\" + object['storageCollateralized'].toString(10));\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(e);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getGasCfx_JS.postMessage(\"ERROR:\" + e.data);\n                    }\n                }\n\n\n            },\n\n            getGasEth: async function (from, to, value, data,network) {\n                try {\n\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n                    let gas = await provider.estimateGas(\n                        {\n                            from: from,\n                            to: to,\n                            value: value,\n                            data: data,\n                        },\n                    );\n\n                    if (!isSDk) {\n                        // console.log(0x9e690.toString(10));\n                        // console.log(0x93dac.toString(10));\n                        // console.log(0x25dde.toString(10));\n                        // console.log(0x095ea7b3.toString());\n                        // let inputData = await ethers.utils.defaultAbiCoder.decode(\n                        //     [ 'address', 'uint256' ],\n                        //     ethers.utils.hexDataSlice(data, 4)\n                        // );\n                        // console.log(inputData[1].toString());\n                        console.log(gas.toString(10));\n                        // console.log(gas['gasLimit'].toString(10));\n                        // console.log(gas['gasUsed'].toString(10));\n                        // console.log(gas['storageCollateralized'].toString(10));\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getGasEth_JS.postMessage(gas.toString(10));\n                        // return gas.toString(10);\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(e);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getGasEth_JS.postMessage(\"ERROR:\" + e.toString());\n                    }\n                }\n\n\n            },\n\n            getNameToAddressCFX: async function (domain) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n\n\n                    var registerReader = cfx.Contract({\n                        abi: REGISTRY_ABI,\n                        address: \"cfx:acdzztjdv0vcx2z2znt296y6sd4hujswean18n0gxy\"\n                    });\n\n\n                    const tokenId = namehash.hash(domain);\n\n\n                    var resolver = await registerReader.resolverOf(tokenId).call();\n                    var resolverReader = cfx.Contract({\n                        abi: RESOLVER_ABI,\n                        address: resolver\n                    });\n\n                    const cfxAddress = await resolverReader.get(tokenId, 'wallet.CFX.address');\n                    if (!isSDk) {\n                        console.log(\"cfxAddress：\" + cfxAddress);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getNameToAddressCFX_JS.postMessage(cfxAddress);\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(\"cfxAddress：\" + e);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getNameToAddressCFX_JS.postMessage(\"ERROR\");\n                    }\n                }\n\n\n            },\n            getAddressToNameCFX: async function (address) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n\n\n                    var resolverReader = cfx.Contract({\n                        abi: RESOLVER_ABI,\n                        address: \"cfx:acc5abps9s20t1axga4m1d4az193517kuyf23r4mcn\"\n                    });\n\n                    const cfxAddress = await resolverReader.getName(address);\n                    if (!isSDk) {\n                        console.log(\"name：\" + cfxAddress);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getAddressToNameCFX_JS.postMessage(cfxAddress);\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(\"name：\" + e);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getAddressToNameCFX_JS.postMessage(\"ERROR\");\n                    }\n                }\n\n\n            },\n            aeDecodePayload: async function (source) {\n\n                try {\n                    var data = Base64.decode(source);\n\n                    if (!isSDk) {\n                        console.log(data.substring(0, data.length - 4));\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        aeDecodePayload_JS.postMessage(data.substring(0, data.length - 4));\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(source);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        aeDecodePayload_JS.postMessage(source);\n                    }\n                }\n\n\n            },\n            getMnemonicCFX: async function () {\n\n                const cfx = new Conflux({\n                    url: CFX_NODE_URL,\n                    networkId: 1029,\n                });\n                const mnemonic = HdWallet.generateMnemonic();\n                const accountHd = await hdkey.getNthAccountOfHDKey({\n                    mnemonic: mnemonic,\n                    nth: 0,\n                    only0x1Prefixed: false\n                });\n                var account = cfx.wallet.addPrivateKey(accountHd.privateKey);\n                if (!isSDk) {\n                    console.log(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                } else {\n                    // eslint-disable-next-line no-undef\n                    getMnemonicCFX_JS.postMessage(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                }\n            },\n            getMnemonicETH: async function () {\n                const cfx = new Conflux({\n                    url: CFX_NODE_URL,\n                    networkId: 1029,\n                });\n                const mnemonic = HdWallet.generateMnemonic();\n                const accountHd = await hdkey.getNthAccountOfHDKey({\n                    mnemonic: mnemonic,\n                    nth: 0,\n                    only0x1Prefixed: false\n                });\n                var account = cfx.wallet.addPrivateKey(accountHd.privateKey);\n                if (!isSDk) {\n                    console.log(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                } else {\n                    // eslint-disable-next-line no-undef\n                    getMnemonicCFX_JS.postMessage(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                }\n            },\n            getSecretKeyCFX: async function (mnemonic) {\n                const cfx = new Conflux({\n                    url: CFX_NODE_URL,\n                    networkId: 1029,\n                });\n\n                const accountHD = await hdkey.getNthAccountOfHDKey({\n                    mnemonic: mnemonic,\n                    nth: 0,\n                    only0x1Prefixed: false\n                });\n                var account = cfx.wallet.addPrivateKey(accountHD.privateKey);\n                if (!isSDk) {\n                    console.log(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                } else {\n                    // eslint-disable-next-line no-undef\n                    getSecretKeyCFX_JS.postMessage(account.address + \"#\" + account.privateKey + \"#\" + mnemonic);\n                }\n\n            },\n            getSecretKeyETH: async function (mnemonic) {\n                const wallet = ethers.Wallet.fromMnemonic(mnemonic);\n                const privateKey = wallet.privateKey;\n                const address = wallet.address;\n\n                if (!isSDk) {\n                    console.log(address + \"#\" + privateKey + \"#\" + mnemonic);\n                } else {\n                    // eslint-disable-next-line no-undef\n                    getSecretKeyETH_JS.postMessage(address + \"#\" + privateKey + \"#\" + mnemonic);\n                }\n\n            },\n            getBalanceAE: async function (address) {\n                const sdkInstance = await getSdkInstance(\"d03826de64d010f683b4aee0ac67e074e01725bb6f94c6d26942ab5a5671886a5e88d722246295cefec3143d2cf2212347aac960d0b3ea4abe03fba86ce0dc2e\", \"ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF\");\n                try {\n                    // eslint-disable-next-line no-undef\n                    let balance = await sdkInstance.balance(address);\n                    if (!isSDk) {\n                        console.log(AmountFormatter.toAe(balance));\n                        return;\n                    }\n                    // eslint-disable-next-line no-undef\n                    getBalanceAE_JS.postMessage(balance);\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(e.toString());\n                        return;\n                    }\n                    // eslint-disable-next-line no-undef\n                    getBalanceAE_JS.postMessage(\"account error\");\n                    callStatusErros(e);\n                }\n            },\n            getBalanceETH: async function (address,coin, network) {\n                try {\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n\n                    let balance = await provider.getBalance(address);\n                    // 余额是 BigNumber (in wei); 格式化为 ether 字符串\n                    let etherString = ethers.utils.formatEther(balance);\n\n                    if (!isSDk) {\n                        console.log(\"Balance: \" + etherString);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getBalanceETH_JS.postMessage(etherString.toString()+\"#\"+coin);\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(\"account error\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getBalanceETH_JS.postMessage(\"account error#\");\n                    }\n                }\n            },\n\n            getBalanceCFX: async function (address) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    let balance = await cfx.getBalance(address);\n                    if (!isSDk) {\n                        console.log(AmountFormatter.toAe(balance));\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getBalanceCFX_JS.postMessage(AmountFormatter.toAe(balance));\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(\"account error\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getBalanceCFX_JS.postMessage(\"account error:\"+e.data);\n                    }\n                }\n            },\n\n\n            getSecretPrivateETH: async function (key) {\n\n\n                try {\n                    const wallet = new ethers.Wallet(key);\n                    const privateKey = wallet.privateKey;\n                    const address = wallet.address;\n\n                    if (!isSDk) {\n                        console.log(address + \"#\" + privateKey + \"#\" + \"\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getSecretKeyETH_JS.postMessage(address + \"#\" + privateKey + \"#\" + \"\");\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(e.toString());\n                        console.log(e.toString() + \"\" + \"#\" + \"\" + \"#\" + \"\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getSecretKeyETH_JS.postMessage(\"\" + \"#\" + \"\" + \"#\" + \"\");\n                    }\n                }\n\n\n            },\n            getSecretPrivateCFX: async function (privateKey) {\n\n\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n\n                    var account = cfx.wallet.addPrivateKey(privateKey);\n                    if (!isSDk) {\n                        console.log(account.address + \"#\" + account.privateKey + \"#\" + \"\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getSecretKeyCFX_JS.postMessage(account.address + \"#\" + account.privateKey + \"#\" + \"\");\n                    }\n                } catch (e) {\n                    if (!isSDk) {\n                        console.log(\"\" + \"#\" + \"\" + \"#\" + \"\");\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        getSecretKeyCFX_JS.postMessage(\"\" + \"#\" + \"\" + \"#\" + \"\");\n                    }\n                }\n\n\n            },\n\n            spendCFX: async function (privateKey, toAddress, amount) {\n\n\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n\n\n                    const account = cfx.wallet.addPrivateKey(privateKey);\n                    const value = Drip.fromCFX(amount); // 100 GDrip = 100000000000 Drip\n                    // const estimate = await cfx.estimateGasAndCollateral({ toAddress,value});\n                    // const status = await cfx.getStatus();\n                    // const epochNumber = await cfx.getEpochNumber();\n                    const gasPrice = Drip.fromGDrip(1);\n                    // const nonce = await cfx.getNextNonce(account.address);\n                    const to = toAddress;\n                    const options = {\n                        from: account.address,\n                        // nonce,\n                        gasPrice,\n                        gas: 23200,\n                        to,\n                        value,\n                        storageLimit: 0,\n                        chainId: status.chainId,\n                        data: null,\n                    };\n\n                    console.log(JSON.stringify(options, null, 2));\n\n                    const txHash = await cfx.sendTransaction(options);\n\n                    console.log(txHash);\n\n                    let receipt = null;\n                    // eslint-disable-next-line no-constant-condition\n                    while (true) {\n                        // try to get receipt every 1000 ms\n                        receipt = await cfx.getTransactionReceipt(txHash);\n                        if (receipt) {\n                            break;\n                        }\n\n                        console.log('tx not executed');\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                    }\n\n                    console.log('receipt', JSON.stringify(receipt, null, 2));\n                    if (!isSDk) {\n                        //if `outcomeStatus` equal 0, return receipt, else throw error\n\n                        console.log(txHash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        spendCFX_JS.postMessage(txHash);\n                    }\n                } catch (e) {\n                    callStatusErros(e.data);\n                }\n            },\n            spendETH: async function (privateKey, toAddress, value, gasPrice, network) {\n\n//eth =1 bsc=12 hero=15 ok=20\n                try {\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n                    let wallet = new ethers.Wallet(privateKey, provider);\n                    let nonce = await wallet.getTransactionCount();\n\n\n                    let tx = {\n                        nonce: nonce,\n                        gasLimit: 25000,\n                        gasPrice: ethers.utils.parseEther(AmountFormatter.toAe(gasPrice)),\n                        to: toAddress,\n                        // chainId: chainId,\n                        value: ethers.utils.parseEther(value),\n                        data: \"\"\n                    };\n                    let txHash = await wallet.sendTransaction(tx);\n                    if (!isSDk) {\n                        //if `outcomeStatus` equal 0, return receipt, else throw error\n                        console.log(\"txHash:\" + txHash.hash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        spendETH_JS.postMessage(txHash.hash);\n                    }\n                } catch (e) {\n                    try {\n                        const split = e.toString().split(\"returnedHash=\\\"\");\n                        if (split.length >= 1 && split[1]!==undefined) {\n                            console.log(\"txHash:\" + split[1]);\n                            let txHash = split[1].toString().split(\"\\\",\")[0];\n                            if (!isSDk) {\n                                console.log(\"txHash:\" + txHash);\n                            } else {\n                                callStatus(\"sucess\");\n                                // eslint-disable-next-line no-undef\n                                spendETH_JS.postMessage(txHash);\n                            }\n                            return;\n                        }\n                        callStatusErros(e);\n                    } catch (e) {\n                        callStatusErros(e);\n                    }\n\n                }\n            },\n            spendCFXERC20: async function (privateKey, toAddress, ctAddress, amount) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    const account = cfx.wallet.addPrivateKey(privateKey);\n                    const contract = cfx.Contract({abi, address: ctAddress});\n                    const decimals = await contract.decimals();\n                    const gasPrice = Drip.fromGDrip(1);\n\n                    let numberOfTokens = ethers.utils.parseUnits(amount, decimals);\n                    const transactionHash = await contract.transfer(toAddress, numberOfTokens).sendTransaction({\n                        from: account,\n                        gasPrice: gasPrice\n                    });\n                    let tHash = await cfx.getTransactionByHash(transactionHash);\n                    console.log(transactionHash);\n                    console.log(tHash);\n                    while (tHash.blockHash == null) {\n                        sleep(1000)\n                        tHash = await cfx.getTransactionByHash(transactionHash);\n                    }\n                    if (!isSDk) {\n                        console.log(tHash)\n                        console.log(transactionHash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        spendCFXERC20_JS.postMessage(transactionHash);\n                    }\n                } catch (e) {\n                    callStatusErros(e.data);\n                }\n\n            },\n            spendETHERC20: async function (privateKey, toAddress, ctAddress, value, gasPrice, network) {\n                try {\n\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n                    let wallet = new ethers.Wallet(privateKey, provider);\n                    let nonce = await wallet.getTransactionCount();\n                    const contract = new ethers.Contract(ctAddress, abi, provider);\n                   const decimals = await contract.decimals();\n                    let numberOfTokens = ethers.utils.parseUnits(value, decimals);\n                    let contractWithSigner = contract.connect(wallet);\n                    let tHash = await contractWithSigner.transfer(toAddress, numberOfTokens, {\n                        nonce: nonce,\n                        gasLimit: 60000,\n                        gasPrice: ethers.utils.parseEther(AmountFormatter.toAe(gasPrice)),\n                    });\n\n                    if (!isSDk) {\n                        console.log(\"tHash:\" + tHash.hash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        spendETHERC20_JS.postMessage(tHash.hash);\n                    }\n                } catch (e) {\n                    try{\n                        const split = e.toString().split(\"returnedHash=\\\"\");\n                        if (split.length >= 1 && split[1]!==undefined) {\n                            let txHash = split[1].toString().split(\"\\\",\")[0];\n                            if (!isSDk) {\n                                console.log(\"txHash:\" + txHash);\n                            } else {\n                                callStatus(\"sucess\");\n                                // eslint-disable-next-line no-undef\n                                spendETHERC20_JS.postMessage(txHash);\n                            }\n                            return;\n                        }\n                        callStatusErros(e);\n                    }catch (e) {\n                        callStatusErros(e);\n\n                    }\n                }\n\n            },\n            balanceETHERC20: async function (address, ctAddress, coin,network) {\n                try {\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n\n                    const contract = new ethers.Contract(ctAddress, abi, provider);\n                    const decimals = await contract.decimals();\n                    const balance = await contract.balanceOf(address);\n                    let etherString = ethers.utils.formatEther(balance);\n                    if (!isSDk) {\n                        console.log(\"token balance:\" + etherString); // 10000n\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        balanceETHERC20_JS.postMessage(balance.toString()+\"#\"+decimals+\"#\"+ctAddress+\"#\"+address+\"#\"+coin);\n                    }\n\n                } catch (e) {\n                    callStatusErros(e);\n                }\n\n            }, balanceCFXERC20: async function (address, ctAddress) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    const contract = cfx.Contract({abi, address: ctAddress});\n                    const decimals = await contract.decimals();\n                    const balance = await contract.balanceOf(address);\n                    if (!isSDk) {\n                        console.log(\"balance:\" + AmountFormatter.toAe(balance.toString())); // 10000n\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        balanceCFXERC20_JS.postMessage(balance.toString()+\"#\"+decimals);\n                    }\n\n                } catch (e) {\n                    callStatusErros(e.data);\n                }\n            },\n            balanceAEX9: async function (address, ctAddress) {\n                try {\n                    const sdkInstance = await getSdkInstance(\"d03826de64d010f683b4aee0ac67e074e01725bb6f94c6d26942ab5a5671886a5e88d722246295cefec3143d2cf2212347aac960d0b3ea4abe03fba86ce0dc2e\", \"ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF\");\n                    const aex9ContractInstance = await sdkInstance.getContractInstance(FungibleTokenFullContract, {contractAddress: ctAddress});\n\n                    let balance = await aex9ContractInstance.methods.balance(address);\n                    let metaInfo = await aex9ContractInstance.methods.meta_info();\n\n                    if (!isSDk) {\n                        console.log(\"metaInfo:\" + metaInfo.decodedResult.decimals);\n                        console.log(\"balance:\" + balance.decodedResult);\n                    } else {\n                        // eslint-disable-next-line no-undef\n                        balanceAEX9_JS.postMessage(balance.decodedResult+\"#\"+metaInfo.decodedResult.decimals+\"#\"+ctAddress+\"#\"+address+\"#AE\");\n                    }\n                } catch (e) {\n                    callStatusErros(e);\n                }\n\n            },\n\n            signTransactionCFX: async function (privateKey, storageLimit, gas, gasPrice, value, toAddress, data) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    const account = cfx.wallet.addPrivateKey(privateKey);\n\n                    //\n                    // console.log(\"storageLimit:\" + storageLimit.toString(10));\n                    // console.log(\"gas:\" + gas.toString(10));\n                    // console.log(\"gasPrice:\" + gasPrice.toString(10));\n                    // console.log(\"from:\" + account.address);\n                    // console.log(\"to:\" + toAddress);\n                    // console.log(\"data:\" + data);\n                    //\n                    // console.log(\"value:\" + value.toString(10));\n                    const pendingTransaction = cfx.sendTransaction({\n                        // nonce: nonce, // account address or instance which added into conflux.wallet\n                        from: account.address, // account address or instance which added into conflux.wallet\n                        to: toAddress, // receiver address\n                        gasPrice: gasPrice.toString(10),\n                        gas: gas.toString(10),\n                        storageLimit: storageLimit.toString(10),\n                        value: value.toString(10),\n                        data: data,\n                    }); // NOTE: without await, transaction not send yet\n\n                    console.log({\n                        from: account.address, // account address or instance which added into conflux.wallet\n                        to: toAddress, // receiver address\n                        gasPrice: gasPrice.toString(10),\n                        gas: gas.toString(10),\n                        storageLimit: storageLimit.toString(10),\n                        value: value.toString(10),\n                        data: data,\n                    });\n                    const transactionHash = await pendingTransaction; // send and await endpoint return transaction hash\n\n                    if (!isSDk) {\n                        //if `outcomeStatus` equal 0, return receipt, else throw error\n                        // await pendingTransaction.executed(); // await transaction executed\n                        console.log(transactionHash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        signTransactionCFX_JS.postMessage(transactionHash);\n                    }\n                } catch (e) {\n                    callStatusErros(e.data);\n                }\n            },\n\n            signTransactionETH: async function (privateKey, gasLimit, gasPrice, value, toAddress, data,network) {\n                try {\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n                    let wallet = new ethers.Wallet(privateKey, provider);\n                    let nonce = await wallet.getTransactionCount();\n\n                    let tx = {\n                        nonce: nonce,\n                        gasLimit: ethers.utils.parseEther(AmountFormatter.toAe(gasLimit)),\n                        gasPrice: ethers.utils.parseEther(AmountFormatter.toAe(gasPrice)),\n                        to: toAddress,\n                        value: ethers.utils.parseEther(AmountFormatter.toAe(value)),\n                        data: data\n                    };\n\n                    let txHash = await wallet.sendTransaction(tx);\n                    if (!isSDk) {\n                        //if `outcomeStatus` equal 0, return receipt, else throw error\n                        console.log(\"txHash:\" + txHash.hash);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        signTransactionETH_JS.postMessage(txHash.hash);\n                        return txHash.hash;\n                    }\n                } catch (e) {\n                    try {\n                        const split = e.toString().split(\"returnedHash=\\\"\");\n                        if (split.length >= 1 && split[1]!==undefined) {\n                            console.log(\"txHash:\" + split[1]);\n                            let txHash = split[1].toString().split(\"\\\",\")[0];\n                            if (!isSDk) {\n                                console.log(\"txHash:\" + txHash);\n                            } else {\n                                callStatus(\"sucess\");\n                                // eslint-disable-next-line no-undef\n                                signTransactionETH_JS.postMessage(txHash);\n                            }\n                            return;\n                        }\n                        callStatusErros(e);\n                    } catch (e) {\n                        callStatusErros(e);\n                    }\n\n                }\n            },\n            signTypeTransactionETH: async function (privateKey, data,network) {\n                try {\n\n                    let provider = new ethers.providers.JsonRpcProvider(network);\n                    let wallet = new ethers.Wallet(privateKey, provider);\n                    const account = wallet.addPrivateKey(privateKey);\n                    let dataSign = await account.signMessage(Base64.decode(data));\n\n                    if (!isSDk) {\n                        console.log(data);\n                        console.log(dataSign);\n                        console.log(dataSign.signature);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        signTypeTransactionETH.postMessage(dataSign.signature);\n                    }\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n            signTypeTransactionCFX: async function (privateKey, data) {\n                try {\n                    const cfx = new Conflux({\n                        url: CFX_NODE_URL,\n                        networkId: 1029,\n                    });\n                    const account = cfx.wallet.addPrivateKey(privateKey);\n                    let dataSign = await account.signMessage(Base64.decode(data));\n\n                    if (!isSDk) {\n                        console.log(data);\n                        console.log(dataSign);\n                        console.log(dataSign.signature);\n                    } else {\n                        callStatus(\"sucess\");\n                        // eslint-disable-next-line no-undef\n                        signTypeTransactionCFX_JS.postMessage(dataSign.signature);\n                    }\n                } catch (e) {\n                    callStatusErros(e.data);\n                }\n            },\n            setNodeCompilerUrl: function (node, compiler) {\n                NODE_URL = node;\n                COMPILER_URL = compiler;\n            },\n\n            setCfxNodeUrl: function (node) {\n                CFX_NODE_URL = node;\n            },\n\n\n            getMnemonic: async function () {\n                const mnemonic = HdWallet.generateMnemonic();\n                const wallet = HdWallet.getHdWalletAccountFromMnemonic(mnemonic, 0);\n\n                if (!isSDk) {\n                    return wallet.publicKey + \"#\" + wallet.secretKey + \"#\" + mnemonic;\n                } else {\n                    // eslint-disable-next-line no-undef\n                    getMnemonic_JS.postMessage(wallet.publicKey + \"#\" + wallet.secretKey + \"#\" + mnemonic);\n                }\n\n\n            },\n\n            getSecretKey: function (mnemonic) {\n                const publicKeyInsecretKey = HdWallet.getHdWalletAccountFromMnemonic(mnemonic, 0);\n                const publicKey = publicKeyInsecretKey.publicKey;\n                const secretKey = publicKeyInsecretKey.secretKey;\n                if (!isSDk)\n                    return publicKey + \"#\" + secretKey;\n                // eslint-disable-next-line no-undef\n                getSecretKey_JS.postMessage(publicKey + \"#\" + secretKey);\n            },\n\n            validationMnemonic: function (mnemonic) {\n                try {\n                    HdWallet.generateSaveHDWallet(mnemonic, 0);\n                    if (!isSDk) {\n                        return true;\n                    }\n                    // eslint-disable-next-line no-undef\n                    validationMnemonic_JS.postMessage(\"sucess\");\n                    return true;\n                } catch (err) {\n                    if (!isSDk) {\n                        return false;\n                    }\n                    // eslint-disable-next-line no-undef\n                    validationMnemonic_JS.postMessage(\"error\");\n                    return err.message\n                }\n            },\n\n            spend: async function (secretKey, publicKey, receiveID, amount, payload) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"broadcast\");\n                    let spend = await sdkInstance.spend(\n                        AmountFormatter.toAettos(amount),\n                        receiveID,\n                        {\n                            payload: Base64.decode(payload),\n                            waitMined: false\n                        },\n                    );\n                    if (!isSDk)\n                        return spend.hash;\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    spend_JS.postMessage(spend.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            updateName: async function (secretKey, publicKey, name, pointData) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n\n                try {\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"aensUpdate\");\n                    const pointersArray = [pointData];\n                    const aensUpdate = await sdkInstance.aensUpdate(name, pointersArray, {\n                        extendPointers: true,\n                        waitMined: true\n                    });\n                    if (!isSDk)\n                        return aensUpdate.hash;\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    updateName_JS.postMessage(aensUpdate.hash);\n\n                } catch (e) {\n                    console.log('Current Block Height:', e.toString());\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"error\");\n                }\n            },\n\n            bidName: async function (secretKey, publicKey, name, nameFee) {\n\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n\n                try {\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"aensBid\");\n                    const bid = await sdkInstance.aensBid(name, AmountFormatter.toAettos(nameFee), {waitMined: false});\n                    console.log(\"AE bid hash:\" + bid.hash);\n                    if (!isSDk)\n                        return bid.hash;\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    bidName_JS.postMessage(bid.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            claimName: async function (secretKey, publicKey, name) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"aensPreclaim\");\n                    const preclaim = await sdkInstance.aensPreclaim(name);\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"aensBid\");\n                    const claim = await sdkInstance.aensClaim(name, preclaim.salt, {waitMined: false});\n                    console.log(\"AE bid hash:\" + claim.hash);\n                    if (!isSDk)\n                        return claim.hash;\n                    // eslint-disable-next-line no-undef\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    claimName_JS.postMessage(claim.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            transferName: async function (secretKey, publicKey, name, address) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"aensTransfer\");\n                    const transfer = await sdkInstance.aensTransfer(name, address, {waitMined: true});\n                    console.log(\"AE transfer hash:\" + transfer.hash);\n                    if (!isSDk)\n                        return transfer.hash;\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    transferName_JS.postMessage(transfer.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractDefiV3Lock: async function (secretKey, publicKey, ctId, amount) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const callDataCall = await sdkInstance.contractEncodeCall(ABCLockContractV3, 'mapping_lock', [AmountFormatter.toAettos(amount)]);\n                    callStatus(\"contractCall\");\n                    const callResult = await sdkInstance.contractCall(ABCLockContractV3, ctId, \"mapping_lock\", callDataCall);\n                    console.log(\"AE transfer hash:\" + callResult.hash);\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    contractDefiV3Lock_JS.postMessage(callResult.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractDefiV3UnLock: async function (secretKey, publicKey, ctId) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const callDataCall = await sdkInstance.contractEncodeCall(ABCLockContractV3, 'mapping_unlock');\n                    callStatus(\"contractCall\");\n                    const callResult = await sdkInstance.contractCall(ABCLockContractV3, ctId, \"mapping_unlock\", callDataCall);\n                    console.log(\"AE transfer hash:\" + callResult.hash);\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    contractDefiV3UnLock_JS.postMessage(callResult.decodedResult);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractDefiV3Benefits: async function (secretKey, publicKey, ctId) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    callStatus(\"contractCall\");\n                    let abcLockContractInstance = await sdkInstance.getContractInstance(ABCLockContractV3, {contractAddress: ctId});\n                    let callResult = await abcLockContractInstance.methods.benefits();\n                    console.log(\"AE transfer hash:\" + JSON.stringify(callResult.decodedResult));\n                    console.log(\"ok\");\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n\n                    // eslint-disable-next-line no-undef\n                    contractDefiV3Benefits_JS.postMessage(callResult.decodedResult);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractTransfer: async function (secretKey, publicKey, ctId, receiveID, amount) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const callDataCall = await sdkInstance.contractEncodeCall(FungibleTokenFullContract, 'transfer', [receiveID, AmountFormatter.toAettos(amount)]);\n                    callStatus(\"contractCall\");\n                    const callResult = await sdkInstance.contractCall(FungibleTokenFullContract, ctId, \"transfer\", callDataCall);\n                    console.log(\"AE transfer hash:\" + callResult.hash);\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n                    //eslint-disable-next-line no-undef\n                    contractTransfer_JS.postMessage(callResult.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractSwapSell: async function (secretKey, publicKey, swapCtId, ctId, count, amount, allowance) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const tokenContract = await sdkInstance.getContractInstance(FungibleTokenFullContract, {contractAddress: ctId});\n                    if (allowance !== \"None\") {\n                        if (allowance >= AmountFormatter.toAettos(count)) {\n                            await callSwapSell(sdkInstance, ctId, count, amount, swapCtId);\n                        } else {\n                            callStatus(\"change_allowance\");\n                            await tokenContract.methods.change_allowance(swapCtId.replace('ct_', 'ak_'), AmountFormatter.toAettos(count));\n                            await callSwapSell(sdkInstance, ctId, count, amount, swapCtId);\n                        }\n                    } else {\n                        callStatus(\"create_allowance\");\n                        await tokenContract.methods.create_allowance(swapCtId.replace('ct_', 'ak_'), AmountFormatter.toAettos(count));\n                        await callSwapSell(sdkInstance, ctId, count, amount, swapCtId);\n                    }\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractSwapBuy: async function (secretKey, publicKey, swapCtId, ctId, accountAddress, amount) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const callDataCall = await sdkInstance.contractEncodeCall(BoxSwapContractV2, 'buy', [ctId, accountAddress]);\n                    callStatus(\"contractCall\");\n                    const callResult = await sdkInstance.contractCall(BoxSwapContractV2, swapCtId, \"buy\", callDataCall, {amount: AmountFormatter.toAettos(amount)});\n                    console.log(\"AE transfer hash:\" + callResult.hash);\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    contractSwapBuy_JS.postMessage(callResult.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            contractSwapCancel: async function (secretKey, publicKey, swapCtId, ctId) {\n                const sdkInstance = await getSdkInstance(secretKey, publicKey);\n                try {\n                    callStatus(\"contractEncodeCall\");\n                    const callDataCall = await sdkInstance.contractEncodeCall(BoxSwapContractV2, 'cancel', [ctId]);\n                    callStatus(\"contractCall\");\n                    const callResult = await sdkInstance.contractCall(BoxSwapContractV2, swapCtId, \"cancel\", callDataCall);\n                    console.log(\"AE transfer hash:\" + callResult.hash);\n                    if (!isSDk)\n                        return callResult.hash;\n                    callStatus(\"sucess\");\n                    // eslint-disable-next-line no-undef\n                    contractSwapCancel_JS.postMessage(callResult.hash);\n                } catch (e) {\n                    callStatusErros(e);\n                }\n            },\n\n            sign: async function (isAccept, s) {\n                if (isAccept && sign === s) {\n                    tempAction.accept();\n                } else {\n                    tempAction.deny();\n                }\n\n            },\n            initWallet: async function (secretKey, publicKey, sourceUrl) {\n                this.url = sourceUrl;\n                const account = MemoryAccount({\n                    keypair: {\n                        secretKey: secretKey,\n                        publicKey: publicKey\n                    }\n                });\n\n                RpcWallet({\n                    compilerUrl: COMPILER_URL,\n                    nodes: [{name: 'local', instance: await Node({url: NODE_URL, internalUrl: NODE_INTERNAL_URL})}],\n                    name: 'Box Wallet',\n                    accounts: [account],\n                    onConnection(aepp, action) {\n                        action.accept();\n                    },\n                    onDisconnect(msg, client) {\n                        console.log('Disconnect client: ', client)\n                    },\n                    onSubscription(aepp, action) {\n                        action.accept()\n                    },\n                    onSign(aepp, action) {\n                        tempAction = action;\n                        // console.log('sign transaction')\n                        // console.log(aepp)\n                        // console.log(action)\n                        // console.log(action.params.tx)\n                        // console.log(action.params.txObject.params)\n                        // console.log('------------------------')\n                        sign = uuid();\n\n                        // eslint-disable-next-line no-undef\n                        onSign_JS.postMessage(sign);\n                        // eslint-disable-next-line no-undef\n                        onSignData_JS.postMessage(JSON.stringify(action.params.txObject.params));\n\n                        // } else {\n                        //     action.deny()\n                        // }\n                        // if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) {\n                        //     action.accept()\n                        // } else {\n                        //     action.deny()\n                        // }\n\n                    },\n                    onAskAccounts(aepp, action) {\n                        // if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) {\n                        //   accept()\n                        // } else {\n                        //   deny()\n                        // }\n                        console.log(aepp)\n                        console.log(action)\n                        console.log('------------------------')\n                        action.deny()\n                    },\n                    onMessageSign(aepp, action) {\n                        // if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) {\n                        //   accept()\n                        // } else {\n                        //   deny()\n                        // }\n                        console.log(aepp)\n                        console.log(action)\n                        console.log('------------------------')\n                        action.deny()\n                    }\n                }).then(wallet => {\n                    console.log(BrowserWindowMessageConnection);\n                    const connection = BrowserWindowMessageConnection({target: this.$refs.iframe.contentWindow});\n                    wallet.addRpcClient(connection);\n                    wallet.shareWalletInfo(connection.sendMessage.bind(connection));\n                    const shareWalletInfoInterval = setInterval(\n                        () => wallet.shareWalletInfo(connection.sendMessage.bind(connection)),\n                        3000,\n                    );\n                    const handler = () => {\n                        wallet.showMenu = false;\n                    };\n                    window.addEventListener('blur', handler);\n                    wallet.$once('hook:destroyed', () => {\n                        window.removeEventListener('blur', handler);\n                        clearInterval(shareWalletInfoInterval);\n                        wallet.getClients().clients.forEach(({id}) => wallet.removeRpcClient(id));\n                    });\n                }).catch(err => {\n                    console.log(\"err\");\n                    console.log(err);\n                })\n            },\n            init: async function () {\n\n\n\n            },\n\n        }\n    }\n\n\n    function uuid() {\n        var s = [];\n        var hexDigits = \"0123456789abcdef\";\n        for (var i = 0; i < 36; i++) {\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n        }\n        s[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n        s[8] = s[13] = s[18] = s[23] = \"-\";\n\n        var uuid = s.join(\"\");\n        return uuid;\n    }\n\n    async function getSdkInstance(secretKey, publicKey) {\n        const account = MemoryAccount({\n            keypair: {\n                secretKey: secretKey,\n                publicKey: publicKey\n            }\n        });\n        const nodeInstance = await Node({url: NODE_URL});\n        return await Universal({\n            compilerUrl: COMPILER_URL,\n            nodes: [{name: 'main-net', instance: nodeInstance}],\n            accounts: [account]\n        });\n    }\n\n    async function callSwapSell(client, ctId, count, amount, swapCtId) {\n        callStatus(\"contractEncodeCall\");\n        const callDataCall = await client.contractEncodeCall(BoxSwapContractV2, 'sell', [ctId, AmountFormatter.toAettos(count), AmountFormatter.toAettos(amount)]);\n        callStatus(\"contractCall\");\n        const callResult = await client.contractCall(BoxSwapContractV2, swapCtId, \"sell\", callDataCall);\n        callStatus(\"sucess\");\n\n        if (!isSDk)\n            return callResult.hash;\n        // eslint-disable-next-line no-undef\n        contractSwapSell_JS.postMessage(callResult.hash);\n    }\n\n    function callStatus(msg) {\n        if (!isSDk)\n            return;\n        // eslint-disable-next-line no-undef\n        status_JS.postMessage(msg);\n    }\n\n    function callStatusErros(e) {\n        if (!isSDk) {\n            console.log('ERROR:',e.toString());\n            return;\n        }\n\n        console.log('ERROR:', e.toString());\n        // eslint-disable-next-line no-undef\n        status_JS.postMessage(\"error\");\n        // eslint-disable-next-line no-undef\n        error_JS.postMessage(e.toString());\n    }\n\n\n    // const accounts = [\n    //     account2\n    // ]\n\n\n    // eslint-disable-next-line no-unused-vars\n</script>\n\n\n<style>\n\n    html {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        clear: both;\n        line-height: 0;\n        overflow: hidden;\n    }\n\n    body {\n        width: 100%;\n        clear: both;\n        line-height: 0;\n        overflow: hidden;\n        height: 100%;\n        margin: 0;\n    }\n\n\n    iframe {\n        /*background-color: #42b983;*/\n        width: 100%;\n        height: 100%;\n        padding: 0;\n        margin: 0;\n        border-width: 0;\n    }\n\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    li {\n        display: inline-block;\n        margin: 0 0px;\n    }\n\n    a {\n        color: #42b983;\n    }\n</style>\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"line-height\":\"40px\"}},[_c('button',{on:{\"click\":function($event){return _vm.getMnemonicCFX()}}},[_vm._v(\" getMnemonicCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getSecretKeyCFX('memory pool equip lesson limb naive endorse advice lift result track gravity')}}},[_vm._v(\" getSecretKeyCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getBalanceCFX('cfx:aar29zsp36tg62pjk0yd66tw1t7cyvbu3e4bkak51w')}}},[_vm._v(\" getBalanceCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getSecretPrivateCFX('')}}},[_vm._v(\" getSecretPrivateCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.signTransactionCFX('','64','44948','1000000000','0','cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7','0x095ea7b300000000000000000000000087bfd2e93c168a0685ebe4afda95108d92a3fa6fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')}}},[_vm._v(\" signTransactionCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.signTypeTransactionCFX('','eyJ0eXBlcyI6eyJFSVA3MTJEb21haW4iOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoic3RyaW5nIn0seyJuYW1lIjoiY2hhaW5JZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoidmVyaWZ5aW5nQ29udHJhY3QiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwiUGVybWl0IjpbeyJuYW1lIjoib3duZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InNwZW5kZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InZhbHVlIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJub25jZSIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiZGVhZGxpbmUiLCJ0eXBlIjoidWludDI1NiJ9XX0sImRvbWFpbiI6eyJuYW1lIjoiTW9vblN3YXAgTFAgVG9rZW4iLCJ2ZXJzaW9uIjoiMSIsImNoYWluSWQiOjEwMjksInZlcmlmeWluZ0NvbnRyYWN0IjoiMHg4RDU0NTExOEQ5MUMwMjdDODA1YzU1MmY2M0E1YzAwYTIwYUU2QWNhIn0sInByaW1hcnlUeXBlIjoiUGVybWl0IiwibWVzc2FnZSI6eyJvd25lciI6IjB4MTBhMDhlRDdFQ2YwMzk1YmEzOTg1NkU5NmNDZDY4QjQ2MThGNUU2MCIsInNwZW5kZXIiOiIweDgwYWU2YTg4Y2UzMzUxZTlmNzI5ZTgxOTlmMjg3MWJhNzg2YWQ3YzUiLCJ2YWx1ZSI6IjE1MTUxMTA3NjgzNjY3MTc3MiIsIm5vbmNlIjoiMHgwMCIsImRlYWRsaW5lIjoxNjMxNzY1MDkzfX0=\\n')}}},[_vm._v(\" signTypeTransactionCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getNameToAddressCFX('heisenberg.cfx')}}},[_vm._v(\" getNameToAddressCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getAddressToNameCFX('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts')}}},[_vm._v(\" getAddressToNameCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.toFormatCfx(0x2dbbf8b6694bbe8bc)}}},[_vm._v(\" toFormatCfx \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getGasCfx('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts','cfx:acam64yj323zd4t1fhybxh3jsg7hu4012yz9kakxs9','0xde0b6b3a7640000','0x5c35083800000000000000000000000000000000000000000000058b918ceb984e0de83a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000010a08ed7ecf0395ba39856e96ccd68b4618f5e600000000000000000000000000000000000000000000000000000000061373df600000000000000000000000000000000000000000000000000000000000000040000000000000000000000008d7df9316faa0586e175b5e6d03c6bda76e3d9500000000000000000000000008b8689c7f3014a4d86e4d1d0daaf74a47f5e0f2700000000000000000000000086d2fb177eff4be03a342951269096265b98ac4600000000000000000000000086424aa36e451e9e22be123933a6ad1c801275fa')}}},[_vm._v(\" getGasCfx \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.spendCFX('','cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf','0.001')}}},[_vm._v(\" spendCFX \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.spendCFXERC20('','cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf','cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7','0')}}},[_vm._v(\" spendCFXERC20 \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.balanceCFXERC20('cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts','cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2')}}},[_vm._v(\" balanceCFXERC20 \")]),_c('br'),_c('br'),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getSecretKeyETH('memory pool equip lesson limb naive endorse advice lift result track gravity')}}},[_vm._v(\" getSecretKeyETH \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getSecretPrivateETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e')}}},[_vm._v(\" getSecretPrivateETH \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','OKT','https://exchainrpc.okex.org/')}}},[_vm._v(\" getBalanceETH OK \")]),_c('button',{on:{\"click\":function($event){return _vm.getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','BSC','https://bsc-dataseed4.ninicoin.io/')}}},[_vm._v(\" getBalanceETH BSC \")]),_c('button',{on:{\"click\":function($event){return _vm.getBalanceETH('0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','HT','https://http-mainnet.hecochain.com/')}}},[_vm._v(\" getBalanceETH HT \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2','0','100000000','https://exchainrpc.okex.org/')}}},[_vm._v(\" spendETHERC20 OK \")]),_c('button',{on:{\"click\":function($event){return _vm.spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0x2859e4544c4bb03966803b044a93563bd2d0dd4d','0','5355000000','https://bsc-dataseed4.ninicoin.io/')}}},[_vm._v(\" spendETHERC20 BSC \")]),_c('button',{on:{\"click\":function($event){return _vm.spendETHERC20('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2','0','2777777777','https://http-mainnet.hecochain.com/')}}},[_vm._v(\" spendETHERC20 HT \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.spendETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0.00001','100000000','https://exchainrpc.okex.org/')}}},[_vm._v(\" spendETH OK \")]),_c('button',{on:{\"click\":function($event){return _vm.spendETH('0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e','0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE','0.00001','6120000000','https://bsc-dataseed4.ninicoin.io/')}}},[_vm._v(\" spendETH BSC \")]),_c('button',{on:{\"click\":function($event){return _vm.spendETH('0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4','0xF99760E82fB180cC5A313753e4f8EC152D97d3E2','9999999999','2500000000','https://heco.mytokenpocket.vip')}}},[_vm._v(\" spendETH HT \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.balanceETHERC20('0x838a7A7f3e16117763C109d98C79ddCd69F6FD6e','0x382bb369d343125bfb2117af9c149795c6c65c50','OKT','https://exchainrpc.okex.org/')}}},[_vm._v(\" balanceETHERC20 OK \")]),_c('button',{on:{\"click\":function($event){return _vm.balanceETHERC20('0xefdca55e4bce6c1d535cb2d0687b5567eef2ae83','0x55d398326f99059ff775485246999027b3197955','BSC','https://bsc-dataseed4.ninicoin.io/')}}},[_vm._v(\" balanceETHERC20 BSC \")]),_c('button',{on:{\"click\":function($event){return _vm.balanceETHERC20('0xf977814e90da44bfa03b6295a0616a897441acec','0xa71edc38d189767582c38a3145b5873052c3e47a','HT','https://http-mainnet.hecochain.com/')}}},[_vm._v(\" balanceETHERC20 HT \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getGasEth(\n    '',\n    '0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2',\n    '',\n    '0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n    'https://exchainrpc.okex.org/')}}},[_vm._v(\" getGasEth \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.signTransactionETH(\n    '',\n    '140871',\n    '276000000',\n    '0',\n    '0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2',\n    '0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n    'https://exchainrpc.okex.org/')}}},[_vm._v(\" signTransactionETH \")]),_c('br'),_c('br'),_c('br'),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.getBalanceAE('ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF')}}},[_vm._v(\" getBalanceAE \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.balanceAEX9('ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF','ct_7UfopTwsRuLGFEcsScbYgQ6YnySXuyMxQWhw6fjycnzS5Nyzq')}}},[_vm._v(\" balanceAEx9 \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.aeDecodePayload('U3BvbnNvcmVkIGJ5IENoaW5hIEZvdW5kYXRpb27vvIjkuK3lm73ln7rph5HkvJrotZ7liqnvvImr+EQO')}}},[_vm._v(\" aeDecodePayload \")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export const ABCLockContractV3 = `\n@compiler >= 6\ninclude \"List.aes\"\n\ncontract interface FungibleTokenInterface =\n\n  entrypoint balances                      : ()                      => map(address, int)\n  entrypoint balance                       : (address)               => option(int)\n  stateful entrypoint transfer             : (address, int)          => unit\n\n\nmain contract ABCLockContractV3 =\n\n    record info_data = {\n        account      : address,\n        count        : int,\n        token        : int,\n        after_height : int,\n        min_height   : int,\n        height       : int,\n        all_count    : int}\n\n    record account_blacklist = {\n        account : address,\n        count   : int,\n        ae      : int,\n        height  : int}\n\n    record account = {\n        account       : address,\n        mapping_count : int,\n        height        : int}\n\n    record state = {\n        mapping_accounts    : map(address,account),\n        account_blacklists  : map(address,account_blacklist),\n        all_count           : int,\n        token               : FungibleTokenInterface,\n        decimals            : int,\n        base_token_count    : int,\n        max_benefits_height : int,\n        min_benefits_height : int,\n        min_lock_count      : int\n     }\n\n    stateful entrypoint\n        init : (FungibleTokenInterface) => state\n        init (token) =\n            { mapping_accounts    = {},\n              account_blacklists  = {},\n              all_count           = 0,\n              token               = token,\n              decimals            = 1000000000000000000,\n              base_token_count    = 300000000000,\n              max_benefits_height = 9999999,\n              min_benefits_height = 100,\n              min_lock_count      = 1000000000000000000}\n\n    stateful entrypoint\n        mapping_lock : (int) => int\n        mapping_lock(count) =\n            require(!is_mapping_account_blacklist(Call.caller), \"IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE\")\n            require(!is_mapping_account(Call.caller), \"IS_MAPPING_ACCOUNTS_TRUE\")\n            require(state.min_lock_count =< count,\"MIN_LOCK_COUNT_LOW\")\n            require(Chain.balance(Call.caller) > count, \"BALANCE_COUNT_LOW\")\n            let account = {account = Call.caller , mapping_count = count , height = Chain.block_height}\n            put(state{mapping_accounts[Call.caller] = account, all_count = state.all_count + count})\n            count\n\n    stateful entrypoint\n        mapping_unlock : () => int\n        mapping_unlock() =\n            require(!is_mapping_account_blacklist(Call.caller), \"IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE\")\n            require(is_mapping_account(Call.caller), \"IS_MAPPING_ACCOUNTS_FALSE\")\n            let account = get_mapping_account(Call.caller)\n            let new_mapping_accounts = Map.delete(Call.caller,state.mapping_accounts)\n            put(state{mapping_accounts = new_mapping_accounts,all_count = state.all_count - account.mapping_count})\n            account.mapping_count\n\n\n    stateful entrypoint\n        account_check_balance : (address) => bool\n        account_check_balance(addr) =\n            require(is_mapping_account(addr), \"IS_MAPPING_ACCOUNTS_FALSE\")\n            if(Chain.balance(addr) < get_mapping_account(addr).mapping_count)\n                let account = get_mapping_account(addr)\n                let new_mapping_accounts = Map.delete(addr,state.mapping_accounts)\n                put(state{mapping_accounts = new_mapping_accounts,all_count = state.all_count - account.mapping_count})\n\n                let account_blacklist = {account = addr , count = account.mapping_count ,ae = Chain.balance(addr), height = Chain.block_height}\n                put(state{account_blacklists[addr] = account_blacklist})\n                true\n            else\n                false\n\n    entrypoint\n        is_account_check_balance : (address) => bool\n        is_account_check_balance(addr) =\n            require(is_mapping_account(addr), \"IS_MAPPING_ACCOUNTS_FALSE\")\n            if(Chain.balance(addr) < get_mapping_account(addr).mapping_count)\n                true\n            else\n                false\n\n    stateful entrypoint\n        benefits : () => int\n        benefits() =\n            require(!is_mapping_account_blacklist(Call.caller), \"IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE\")\n            require(is_mapping_account(Call.caller), \"IS_MAPPING_ACCOUNTS_FALSE\")\n            if(account_check_balance(Call.caller))\n                -1\n            else\n                let account = get_mapping_account(Call.caller)\n                let after_height = Chain.block_height - account.height\n                if(after_height > state.max_benefits_height)\n                    let token_count = state.base_token_count * (account.mapping_count / state.decimals) * state.max_benefits_height\n                    state.token.transfer(account.account,token_count)\n\n                    let update_account = {account = account.account,mapping_count = account.mapping_count,height = Chain.block_height}\n                    put(state{mapping_accounts[Call.caller] = update_account})\n                    token_count\n                else\n                    require(after_height > state.min_benefits_height, \"MIN_BENEFITS_HEIGHT\")\n                    let token_count = state.base_token_count * (account.mapping_count / state.decimals) * after_height\n                    state.token.transfer(account.account,token_count)\n\n                    let update_account = {account = account.account,mapping_count = account.mapping_count,height = Chain.block_height}\n                    put(state{mapping_accounts[Call.caller] = update_account})\n                    token_count\n\n    entrypoint\n        get_status : () => state\n        get_status()=\n            let state = {\n                mapping_accounts    = {},\n                account_blacklists  = {},\n                all_count           = state.all_count,\n                token               = state.token,\n                decimals            = state.decimals,\n                base_token_count    = state.base_token_count,\n                max_benefits_height = state.max_benefits_height,\n                min_benefits_height = state.min_benefits_height,\n                min_lock_count      = state.min_lock_count}\n            state\n\n    stateful entrypoint\n        update_status : (int,int,int,int,FungibleTokenInterface) => state\n        update_status(base_token_count,max_benefits_height,min_benefits_height,min_lock_count,token)=\n            protocol_restrict()\n            put(state{\n                mapping_accounts    = state.mapping_accounts,\n                account_blacklists  = state.account_blacklists,\n                all_count           = state.all_count,\n                token               = token,\n                decimals            = state.decimals,\n                base_token_count    = base_token_count,\n                max_benefits_height = max_benefits_height,\n                min_benefits_height = min_benefits_height,\n                min_lock_count      = min_lock_count})\n            get_status()\n\n    stateful entrypoint\n        withdraw_token : () => unit\n        withdraw_token() =\n            protocol_restrict()\n            switch(state.token.balance(Contract.address))\n                Some(balance) => state.token.transfer(Contract.creator,balance)\n                None => state.token.transfer(Contract.creator,0)\n\n    stateful entrypoint\n        remove_account_blacklist : (address) => unit\n        remove_account_blacklist(addr) =\n            protocol_restrict()\n            require(is_mapping_account_blacklist(addr), \"IS_MAPPING_ACCOUNTS_BLACK_LIST_FALSE\")\n            let new_account_blacklists = Map.delete(addr,state.account_blacklists)\n            put(state{account_blacklists = new_account_blacklists})\n\n    entrypoint\n        get_mapping_accounts : ()=> list(address * account)\n        get_mapping_accounts() =\n            let mapping_accounts_list = Map.to_list(state.mapping_accounts)\n            mapping_accounts_list\n\n    entrypoint\n        get_accounts_blacklists : ()=> list(address * account_blacklist)\n        get_accounts_blacklists() =\n            let accounts_blacklists = Map.to_list(state.account_blacklists)\n            accounts_blacklists\n\n    entrypoint\n        get_mapping_account : (address) => account\n        get_mapping_account(addr) =\n            switch(Map.lookup(addr, state.mapping_accounts))\n                Some(account) => account\n                None => {account = Call.caller , mapping_count = 0 , height = -1}\n\n    entrypoint\n        get_account_blacklist : (address) => account_blacklist\n        get_account_blacklist(addr) =\n            switch(Map.lookup(addr, state.account_blacklists))\n                Some(account_blacklist) => account_blacklist\n                None => {account = Call.caller , count = 0 ,ae = 0, height = -1}\n\n    entrypoint\n        get_data_info : (address) => info_data\n        get_data_info(addr) =\n            let account = get_mapping_account(addr)\n            let after_height = Chain.block_height - account.height\n            let token_count  = state.base_token_count * (account.mapping_count / state.decimals) * after_height\n            {   account      = addr,\n                count        = account.mapping_count,\n                token        = token_count,\n                min_height   = state.min_benefits_height,\n                after_height = after_height,\n                height       = account.height,\n                all_count    = state.all_count}\n\n\n\n    function\n        is_mapping_account : (address) => bool\n        is_mapping_account(addr) =\n            switch(Map.lookup(addr, state.mapping_accounts))\n                Some(account) => true\n                None => false\n\n    function\n        is_mapping_account_blacklist : (address) => bool\n        is_mapping_account_blacklist(addr) =\n            switch(Map.lookup(addr, state.account_blacklists))\n                Some(int) => true\n                None => false\n\n    function\n        protocol_restrict : () => unit\n        protocol_restrict() =\n            require(Call.origin == Contract.creator, \"PROTOCOL_RESTRICTED\")\n\n\n\n\n\n\t`\n","export const FungibleTokenFullContract = `\n// ISC License\n//\n// Copyright (c) 2017, aeternity developers\n//\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n// PERFORMANCE OF THIS SOFTWARE.\n\n\n// THIS IS NOT SECURITY AUDITED\n// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST\n\n@compiler >= 5\n\ninclude \"Option.aes\"\ninclude \"String.aes\"\n\n/// @title - Fungible token with all the extensions - burn, mint, allowances\ncontract FungibleTokenFull =\n\n  // This defines the state of type record encapsulating the contract's mutable state\n  record state =\n    { owner        : address      // the smart contract's owner address\n    , total_supply : int          // total token supply\n    , balances     : balances     // balances for each account\n    , meta_info    : meta_info    // token meta info (name, symbol, decimals)\n    , allowances   : allowances   // owner of account approves the transfer of an amount to another account\n    , swapped      : map(address, int) }\n\n  // This is the meta-information record type\n  record meta_info =\n    { name     : string\n    , symbol   : string\n    , decimals : int }\n\n  // This is the format of allowance record type that will be used in the state\n  record allowance_accounts = { from_account : address, for_account : address }\n\n  // This is a type alias for the balances map\n  type balances = map(address, int)\n\n  // This is a type alias for the allowances map\n  type allowances = map(allowance_accounts, int)\n\n  // Declaration and structure of datatype event\n  // and events that will be emitted on changes\n  datatype event =\n    Transfer(address, address, int)\n    | Allowance(address, address, int)\n    | Burn(address, int)\n    | Mint(address, int)\n    | Swap(address, int)\n\n  // List of supported extensions\n  entrypoint aex9_extensions() : list(string) = [\"allowances\", \"mintable\", \"burnable\", \"swappable\"]\n\n  // Create a fungible token with\n  // the following \\`name\\` \\`symbol\\` and \\`decimals\\`\n  // and set the inital smart contract state\n  entrypoint init(name: string, decimals : int, symbol : string, initial_owner_balance : option(int)) =\n    // If the \\`name\\` lenght is less than 1 symbol abort the execution\n    require(String.length(name) >= 1, \"STRING_TOO_SHORT_NAME\")\n    // If the \\`symbol\\` length is less than 1 symbol abort the execution\n    require(String.length(symbol) >= 1, \"STRING_TOO_SHORT_SYMBOL\")\n    // If the provided value for \\`decimals\\` is negative abort the execution\n    require_non_negative_value(decimals)\n    // If negative initial owner balance is passed, abort the execution\n    let initial_supply = Option.default(0, initial_owner_balance)\n    require_non_negative_value(initial_supply)\n\n    let owner = Call.caller\n    { owner        = owner,\n      total_supply = initial_supply,\n      balances     = Option.match({}, (balance) => { [owner] = balance }, initial_owner_balance),\n      meta_info    = { name = name, symbol = symbol, decimals = decimals },\n      allowances   = {},\n      swapped      = {} }\n\n  // Get the token meta info\n  entrypoint meta_info() : meta_info =\n    state.meta_info\n\n  // Get the token total supply\n  entrypoint total_supply() : int =\n    state.total_supply\n\n  // Get the token owner address\n  entrypoint owner() : address =\n    state.owner\n\n  // Get the balances state\n  entrypoint balances() : balances =\n    state.balances\n\n  // Get balance for address of \\`owner\\`\n  // returns option(int)\n  // If the \\`owner\\` address haven't had any token balance\n  // in this smart contract the return value is None\n  // Otherwise Some(int) is returned with the current balance\n  entrypoint balance(account: address) : option(int) =\n    Map.lookup(account, state.balances)\n\n  // Get all swapped tokens stored in state\n  entrypoint swapped() : map(address, int) =\n    state.swapped\n\n  // Get the allowances state\n  entrypoint allowances() : allowances =\n    state.allowances\n\n  // Get the allowance for passed \\`allowance_accounts\\` record\n  // returns option(int)\n  // This will lookup and return the allowed spendable amount\n  // from one address for another\n  // If there is no such allowance present result is None\n  // Otherwise Some(int) is returned with the allowance amount\n  entrypoint allowance(allowance_accounts : allowance_accounts) : option(int) =\n    Map.lookup(allowance_accounts, state.allowances)\n\n  // Get the allowance for caller from \\`from_account\\` address\n  // returns option(int)\n  // This will look up the allowances and return the allowed spendable amount\n  // from \\`from_account\\` for the transaction sender \\`Call.caller\\`\n  // If there is no such allowance present result is None\n  // Otherwise Some(int) is returned with the allowance amount\n  entrypoint allowance_for_caller(from_account: address) : option(int) =\n    allowance({ from_account = from_account, for_account = Call.caller })\n\n  // Send \\`value\\` amount of tokens from address \\`from_account\\` to address \\`to_account\\`\n  // The transfer_allowance method is used for a withdraw workflow, allowing contracts to send\n  // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n  // fees in sub-token contract.\n  // The execution will abort and fail if there is no allowance set up previous this call\n  stateful entrypoint transfer_allowance(from_account: address, to_account: address, value: int) =\n    let allowance_accounts = { from_account = from_account, for_account = Call.caller }\n    internal_transfer(from_account, to_account, value)\n    internal_change_allowance(allowance_accounts, -value)\n\n  // Create allowance for \\`for_account\\` to withdraw from your account \\`Call.caller\\`,\n  // multiple times, up to the \\`value\\` amount.\n  // This function will abort and fail if called again when there is allowance\n  // already set for these particular accounts pair.\n  stateful entrypoint create_allowance(for_account: address, value: int) =\n    // Check if the passed value is not negative\n    require_non_negative_value(value)\n    // Set the allowance account pair in the memory variable\n    let allowance_accounts = { from_account =  Call.caller, for_account = for_account }\n    // Check if there is no allowance already present in the state\n    // for these particular accounts pair.\n    require_allowance_not_existent(allowance_accounts)\n    // Save the allowance value for these accounts pair in the state\n    put(state{ allowances[allowance_accounts] = value })\n    // Fire Allowance event to include it in the transaction event log\n    Chain.event(Allowance(Call.caller, for_account, value))\n\n  // Allows to change the allowed spendable value for \\`for_account\\` with \\`value_change\\`\n  stateful entrypoint change_allowance(for_account: address, value_change: int) =\n    let allowance_accounts = { from_account =  Call.caller, for_account = for_account }\n    internal_change_allowance(allowance_accounts, value_change)\n\n  // Resets the allowance given \\`for_account\\` to zero.\n  stateful entrypoint reset_allowance(for_account: address) =\n    let allowance_accounts = { from_account = Call.caller, for_account = for_account }\n    internal_change_allowance(allowance_accounts, - state.allowances[allowance_accounts])\n\n  /// Transfer the balance of \\`value\\` from \\`Call.caller\\` to \\`to_account\\` account\n  stateful entrypoint transfer(to_account: address, value: int) =\n    internal_transfer(Call.caller, to_account, value)\n\n  // Destroys \\`value\\` tokens from \\`Call.caller\\`, reducing the total supply.\n  // \\`Burn\\` event with \\`Call.caller\\` address and \\`value\\`.\n  stateful entrypoint burn(value: int) =\n    require_balance(Call.caller, value)\n    require_non_negative_value(value)\n    put(state{ total_supply = state.total_supply - value, balances[Call.caller] @ b = b - value })\n    Chain.event(Burn(Call.caller, value))\n\n  // Creates \\`value\\` tokens and assigns them to \\`account\\`, increasing the total supply.\n  // Emits a \\`Mint\\` event with \\`account\\` and \\`value\\`.\n  stateful entrypoint mint(account: address, value: int) =\n    require_owner()\n    require_non_negative_value(value)\n    put(state{ total_supply = state.total_supply + value, balances[account = 0] @ b = b + value })\n    Chain.event(Mint(account, value))\n\n  stateful entrypoint swap() =\n    let balance = Map.lookup_default(Call.caller, state.balances, 0)\n    burn(balance)\n    put(state{ swapped[Call.caller] = balance })\n    Chain.event(Swap(Call.caller, balance))\n\n  stateful entrypoint check_swap(account: address) : int =\n    Map.lookup_default(account, state.swapped, 0)\n\n  // INTERNAL FUNCTIONS\n\n  function require_owner() =\n    require(Call.caller == state.owner, \"ONLY_OWNER_CALL_ALLOWED\")\n\n  function require_non_negative_value(value : int) =\n    require(value >= 0, \"NON_NEGATIVE_VALUE_REQUIRED\")\n\n  function require_balance(account : address, value : int) =\n    switch(balance(account))\n      Some(balance) =>\n        require(balance >= value, \"ACCOUNT_INSUFFICIENT_BALANCE\")\n      None => abort(\"BALANCE_ACCOUNT_NOT_EXISTENT\")\n\n  stateful function internal_transfer(from_account: address, to_account: address, value: int) =\n    require_non_negative_value(value)\n    require_balance(from_account, value)\n    put(state{ balances[from_account] @ b = b - value })\n    put(state{ balances[to_account = 0] @ b = b + value })\n    Chain.event(Transfer(from_account, to_account, value))\n\n  function require_allowance_not_existent(allowance_accounts : allowance_accounts) =\n    switch(allowance(allowance_accounts))\n      None => None\n      Some(_) => abort(\"ALLOWANCE_ALREADY_EXISTENT\")\n\n  function require_allowance(allowance_accounts : allowance_accounts, value : int) : int =\n    switch(allowance(allowance_accounts))\n      Some(allowance) =>\n        require_non_negative_value(allowance + value)\n        allowance\n      None => abort(\"ALLOWANCE_NOT_EXISTENT\")\n\n  stateful function internal_change_allowance(allowance_accounts : allowance_accounts, value_change : int) =\n    let allowance = require_allowance(allowance_accounts, value_change)\n    let new_allowance = allowance + value_change\n    require_non_negative_value(new_allowance)\n    put(state{ allowances[allowance_accounts] = new_allowance })\n    Chain.event(Allowance(allowance_accounts.from_account, allowance_accounts.for_account, new_allowance))\n\n\t\t`\n","export const BoxSwapContractV2 = `\n@compiler >= 6\ninclude \"List.aes\"\n\ncontract interface FungibleTokenInterface =\n\n    stateful entrypoint transfer_allowance   : (address, address, int) => unit\n    stateful entrypoint transfer             : (address, int)          => unit\n    entrypoint balance                       : (address)               => option(int)\n\npayable main contract BoxSwapContractV2 =\n\n    record coin = {\n        token           : FungibleTokenInterface,\n        coin_name       : string,\n        low_token_count : int,\n        low_ae_count    : int,\n        rate_swap       : int,\n        rate_cancel     : int,\n        freeze          : int,\n        bonus_address   : address}\n\n    record account = {\n        account       : address,\n        coin_name     : string,\n        token         : FungibleTokenInterface,\n        create_time   : int,\n        create_height : int,\n        token_count   : int,\n        ae_count      : int}\n\n    record order = {\n        buy_address   : address,\n        sell_address  : address,\n        create_time   : int,\n        create_height : int,\n        pay_time      : int,\n        pay_height    : int,\n        coin_name     : string,\n        token_count   : int,\n        ae_count      : int}\n\n    record swaps_account = {\n        coin_account : map(address, account),\n        transaction  : int}\n\n    record state = {\n        coin_swaps   : map(FungibleTokenInterface, swaps_account),\n        coins        : map(FungibleTokenInterface, coin),\n        coin_account : map(address, map(FungibleTokenInterface, account)),\n        records      : map(address, list(order)),\n        owner        : address,\n        percentage   : int,\n        record_size  : int,\n        decimals     : int}\n\n    stateful entrypoint\n        init : () => state\n        init () =\n            let owner = Call.caller\n            { coin_swaps   = {},\n              coins        = {},\n              coin_account = {},\n              records      = {},\n              owner        = owner,\n              percentage   = 1000,\n              record_size  = 1,\n              decimals     = 1000000000000000000}\n\n\n    stateful entrypoint\n        add_coin : (FungibleTokenInterface,string,int,int,int,int,address) => coin\n        add_coin(ct_address,coin_name,low_token_count,low_ae_count,rate_swap,rate_cancel,bonus_address) =\n            protocol_restrict()\n            require(!is_coin_exist(ct_address), \"IS_COIN_EXIST_TRUE\")\n            let coin = { token           = ct_address,\n                         coin_name       = coin_name,\n                         low_token_count = low_token_count,\n                         low_ae_count    = low_ae_count,\n                         rate_swap       = rate_swap,\n                         rate_cancel     = rate_cancel,\n                         freeze          = 0,\n                         bonus_address   = bonus_address}\n            put(state{coins[ct_address] = coin})\n            put(state{coin_swaps[ct_address] = { coin_account = {},\n                                                 transaction  = 0}})\n            coin\n\n    stateful entrypoint\n        update_coin : (FungibleTokenInterface,string,int,int,int,int,int,address) => coin\n        update_coin(ct_address,coin_name,low_token_count,low_ae_count,rate_swap,rate_cancel,freeze,bonus_address) =\n            protocol_restrict()\n            require(is_coin_exist(ct_address), \"IS_COIN_EXIST_FALSE\")\n\n            let coin = get_coin(ct_address)\n            let new_coin = { token           = coin.token,\n                             coin_name       = coin_name,\n                             low_token_count = low_token_count,\n                             low_ae_count    = low_ae_count,\n                             rate_swap       = rate_swap,\n                             rate_cancel     = rate_cancel,\n                             freeze          = freeze,\n                             bonus_address   = bonus_address}\n            put(state{coins[ct_address] = new_coin})\n            new_coin\n\n\n    stateful entrypoint\n        sell : (FungibleTokenInterface,int,int) => int\n        sell(ct_address,token_count,ae_count) =\n            require(is_coin_exist(ct_address),\"IS_COIN_EXIST_FALSE\")\n            require(!is_swap_account_exist(ct_address,Call.caller),\"IS_COIN_ACCOUNT_EXIST_TRUE\")\n            let coin = get_coin(ct_address)\n            require(token_count >= coin.low_token_count,\"LOW_TOKEN_COUNT_LOW_TRUE\")\n            require(token_count >= coin.low_ae_count,\"LOW_AE_COUNT_LOW_TRUE\")\n            require(coin.freeze == 0,\"COIN_FREEZE\")\n            coin.token.transfer_allowance(Call.caller,Contract.address,token_count)\n            let account = { account       = Call.caller,\n                            coin_name     = coin.coin_name,\n                            token         = coin.token,\n                            create_time   = Chain.timestamp,\n                            create_height = Chain.block_height,\n                            token_count   = token_count,\n                            ae_count      = ae_count}\n            let swaps_account = get_swap_accounts(ct_address)\n            let new_swaps_account = swaps_account{ coin_account[Call.caller] = account,\n                                                   transaction               = swaps_account.transaction}\n            let account_coin_map = get_coin_account_map(Call.caller)\n\n            put(state{coin_account[Call.caller = account_coin_map][ct_address] = account})\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            ae_count\n\n    stateful entrypoint\n        cancel : (FungibleTokenInterface) => int\n        cancel(ct_address) =\n            require(is_coin_exist(ct_address),\"IS_COIN_EXIST_FALSE\")\n            require(is_swap_account_exist(ct_address,Call.caller),\"IS_COIN_ACCOUNT_EXIST_FALSE\")\n            let account = get_swap_account(ct_address,Call.caller)\n            let coin = get_coin(ct_address)\n            require(coin.freeze == 0,\"COIN_FREEZE\")\n            coin.token.transfer(account.account,\n                                account.token_count *\n                                (state.percentage - coin.rate_cancel) /\n                                state.percentage)\n            coin.token.transfer(coin.bonus_address,\n                                account.token_count *\n                                coin.rate_cancel /\n                                state.percentage)\n            let coin = get_coin(ct_address)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(Call.caller, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{ coin_account = delete_accounts,\n                                                   transaction  = swaps_account.transaction}\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(Call.caller))\n            put(state{coin_account[Call.caller] = account_coin_map})\n            account.token_count\n\n    stateful entrypoint\n        cancel_address : (FungibleTokenInterface,address) => int\n        cancel_address(ct_address,addr) =\n            protocol_restrict()\n            require(is_coin_exist(ct_address),\"IS_COIN_EXIST_FALSE\")\n            require(is_swap_account_exist(ct_address,addr),\"IS_COIN_ACCOUNT_EXIST_FALSE\")\n            let account = get_swap_account(ct_address,addr)\n            let coin = get_coin(ct_address)\n            coin.token.transfer(account.account, account.token_count)\n            let coin = get_coin(ct_address)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(addr, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{ coin_account = delete_accounts,\n                                                   transaction  = swaps_account.transaction}\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(addr))\n            put(state{coin_account[addr] = account_coin_map})\n            account.token_count\n\n\n    payable stateful entrypoint\n        buy : (FungibleTokenInterface,address) => account\n        buy(ct_address,addr) =\n            require(is_coin_exist(ct_address),\"IS_COIN_EXIST_FALSE\")\n            require(is_swap_account_exist(ct_address,addr),\"IS_COIN_ACCOUNT_EXIST_FALSE\")\n            let account = get_swap_account(ct_address,addr)\n            require(Call.value =< account.ae_count,\"AE_VALUE_LOW\")\n            let coin = get_coin(ct_address)\n            require(coin.freeze == 0,\"COIN_FREEZE\")\n            coin.token.transfer(Call.caller,\n                                account.token_count *\n                                (state.percentage - coin.rate_swap) /\n                                state.percentage)\n            coin.token.transfer(coin.bonus_address,\n                                account.token_count *\n                                coin.rate_swap /\n                                state.percentage)\n            Chain.spend(account.account,\n                        Call.value *\n                        (state.percentage - coin.rate_swap) /\n                        state.percentage)\n            Chain.spend(coin.bonus_address,\n                        Call.value *\n                        coin.rate_swap /\n                        state.percentage)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(account.account, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{coin_account = delete_accounts,\n                                                  transaction  = swaps_account.transaction + account.ae_count / state.decimals}\n            put(state{ coin_swaps[ct_address] = new_swaps_account})\n\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(account.account))\n            put(state{coin_account[account.account] = account_coin_map})\n\n            let order = { buy_address = Call.caller,\n                          sell_address  = account.account,\n                          create_time   = account.create_time,\n                          create_height = account.create_height,\n                          pay_time      = Chain.timestamp,\n                          pay_height    = Chain.block_height,\n                          coin_name     = account.coin_name,\n                          token_count   = account.token_count,\n                          ae_count      = Call.value}\n            let account_record = get_accounts_records(Call.caller)\n            if(List.length(account_record) >= state.record_size)\n                let account_record = List.drop(List.length(account_record), account_record)\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[Call.caller] = account_record})\n            else\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[Call.caller] = account_record})\n\n            let account_record = get_accounts_records(account.account)\n            if(List.length(account_record) >= state.record_size)\n                let account_record = List.drop(List.length(account_record), account_record)\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[account.account] = account_record})\n            else\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[account.account] = account_record})\n\n            account\n\n    entrypoint\n        get_status : () => state\n        get_status()=\n            let state = { coin_swaps   = {},\n                          coins        = {},\n                          coin_account = {},\n                          records      = {},\n                          owner        = state.owner,\n                          percentage   = state.percentage,\n                          record_size  = state.record_size,\n                          decimals     = state.decimals}\n            state\n\n    stateful entrypoint\n        update_record_size : (int) => state\n        update_record_size(record_size)=\n            put(state {record_size = state.record_size})\n            state\n\n    entrypoint\n        get_my_swap_account : (FungibleTokenInterface,address) => account\n        get_my_swap_account(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => account\n\n    entrypoint\n        get_my_swap_account_coins : (address) => map(FungibleTokenInterface, account)\n        get_my_swap_account_coins(addr) =\n            switch(Map.lookup(addr, state.coin_account))\n                Some(account) => account\n                None => {}\n\n    entrypoint\n        get_accounts_records : (address) => list(order)\n        get_accounts_records(addr) =\n            switch(Map.lookup(addr, state.records))\n                Some(orders) => orders\n                None => []\n\n\n    stateful entrypoint\n        withdraw_token : (FungibleTokenInterface) => int\n        withdraw_token(token) =\n            protocol_restrict()\n            switch(token.balance(Contract.address))\n                Some(balance) => token.transfer(Contract.creator,balance)\n                None => token.transfer(Contract.creator,0)\n\n            switch(token.balance(Contract.address))\n                Some(balance) => balance\n                None => 0\n\n\n    entrypoint\n        get_coins : () => map(FungibleTokenInterface, coin)\n        get_coins() =\n            state.coins\n\n\n    entrypoint\n        get_swap_accounts : (FungibleTokenInterface) => swaps_account\n        get_swap_accounts(ct_address) =\n            switch(Map.lookup(ct_address, state.coin_swaps))\n                Some(swaps_account) => swaps_account\n    entrypoint\n        get_coin_account_map : (address) => map(FungibleTokenInterface, account)\n        get_coin_account_map(addr) =\n            switch(Map.lookup(addr, state.coin_account))\n                Some(account_map) => account_map\n                None => {}\n    function\n        is_swap_account_exist : (FungibleTokenInterface,address) => bool\n        is_swap_account_exist(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => true\n                None => false\n\n    function\n        get_swap_account : (FungibleTokenInterface,address) => account\n        get_swap_account(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => account\n\n\n\n\n\n    function\n        is_coin_exist : (FungibleTokenInterface) => bool\n        is_coin_exist(ct_address) =\n            switch(Map.lookup(ct_address, state.coins))\n                Some(coin) => true\n                None => false\n\n    function\n        get_coin : (FungibleTokenInterface) => coin\n        get_coin(ct_address) =\n            switch(Map.lookup(ct_address, state.coins))\n                Some(coin) => coin\n\n    function\n        protocol_restrict : () => unit\n        protocol_restrict() =\n            require(Call.origin == Contract.creator, \"PROTOCOL_RESTRICTED\")\n\n\n\n\n\n\n\n\n`\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Wallet.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Wallet.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Wallet.vue?vue&type=template&id=302eaeeb&\"\nimport script from \"./Wallet.vue?vue&type=script&lang=js&\"\nexport * from \"./Wallet.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Wallet.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './components/Wallet.vue'\n\n\n\nVue.config.productionTip = false;\n\n\nnew Vue({\n    render: h => h(App),\n}).$mount('#app')\n\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Wallet.vue?vue&type=style&index=0&lang=css&\""],"sourceRoot":""}