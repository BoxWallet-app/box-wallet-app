(function(e){function n(n){for(var a,o,s=n[0],f=n[1],i=n[2],l=0,p=[];l<s.length;l++)o=s[l],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&p.push(r[o][0]),r[o]=0;for(a in f)Object.prototype.hasOwnProperty.call(f,a)&&(e[a]=f[a]);u&&u(n);while(p.length)p.shift()();return c.push.apply(c,i||[]),t()}function t(){for(var e,n=0;n<c.length;n++){for(var t=c[n],a=!0,s=1;s<t.length;s++){var f=t[s];0!==r[f]&&(a=!1)}a&&(c.splice(n--,1),e=o(o.s=t[0]))}return e}var a={},r={app:0},c=[];function o(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=e,o.c=a,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)o.d(t,a,function(n){return e[n]}.bind(null,a));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],f=s.push.bind(s);s.push=n,s=s.slice();for(var i=0;i<s.length;i++)n(s[i]);var u=f;c.push([0,"chunk-vendors"]),t()})({0:function(e,n,t){e.exports=t("56d7")},1:function(e,n){},10:function(e,n){},11:function(e,n){},12:function(e,n){},13:function(e,n){},14:function(e,n){},15:function(e,n){},16:function(e,n){},17:function(e,n){},18:function(e,n){},2:function(e,n){},3:function(e,n){},"3b59":function(e){e.exports=JSON.parse('{"contractName":"MiniERC20","abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040523480156200001157600080fd5b50604051620010ca380380620010ca833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805160405193929190846401000000008211156200011f57600080fd5b838201915060208201858111156200013657600080fd5b82518660018202830111640100000000821117156200015457600080fd5b8083526020830192505050908051906020019080838360005b838110156200018a5780820151818401526020810190506200016d565b50505050905090810190601f168015620001b85780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291905050508360009080519060200190620001e49291906200026e565b5082600160006101000a81548160ff021916908360ff1602179055508160029080519060200190620002189291906200026e565b508060038190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050506200031d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b157805160ff1916838001178555620002e2565b82800160010185558215620002e2579182015b82811115620002e1578251825591602001919060010190620002c4565b5b509050620002f19190620002f5565b5090565b6200031a91905b8082111562000316576000816000905550600101620002fc565b5090565b90565b610d9d806200032d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce567146102935780635c658165146102b757806370a082311461032f57806395d89b4114610387578063a9059cbb1461040a578063dd62ed3e14610470576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b557806327e235e31461023b575b600080fd5b6100b66104e8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f610678565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061067e565b604051808215151515815260200191505060405180910390f35b61027d6004803603602081101561025157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109e9565b6040518082815260200191505060405180910390f35b61029b610a01565b604051808260ff1660ff16815260200191505060405180910390f35b610319600480360360408110156102cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a14565b6040518082815260200191505060405180910390f35b6103716004803603602081101561034557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a39565b6040518082815260200191505060405180910390f35b61038f610a82565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cf5780820151818401526020810190506103b4565b50505050905090810190601f1680156103fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104566004803603604081101561042057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b20565b604051808215151515815260200191505060405180910390f35b6104d26004803603604081101561048657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce0565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057e5780601f106105535761010080835404028352916020019161057e565b820191906000526020600020905b81548152906001019060200180831161056157829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b600080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62616c616e636573206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b8281101561082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f616c6c6f77616e6365206e6f7420656e6f75676800000000000000000000000081525060200191505060405180910390fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156109785782600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60046020528060005260406000206000915090505481565b600160009054906101000a900460ff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b185780601f10610aed57610100808354040283529160200191610b18565b820191906000526020600020905b815481529060010190602001808311610afb57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f62616c616e636573206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509291505056fea2646970667358221220ba3544f95832f9a6f264be220893ae1c951498e955e1908563105ee727d890c064736f6c634300060a0033"}')},4:function(e,n){},5:function(e,n){},"56d7":function(e,n,t){"use strict";t.r(n);t("e260"),t("e6cf"),t("cca6"),t("a79d");var a,r=t("2b0e"),c=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticStyle:{"line-height":"40px"}},[t("button",{on:{click:function(n){return e.getMnemonicCFX()}}},[e._v(" getMnemonicCFX ")]),t("br"),t("button",{on:{click:function(n){return e.getSecretKeyCFX("memory pool equip lesson limb naive endorse advice lift result track gravity")}}},[e._v(" getSecretKeyCFX ")]),t("br"),t("button",{on:{click:function(n){return e.getBalanceCFX("cfx:aar29zsp36tg62pjk0yd66tw1t7cyvbu3e4bkak51w")}}},[e._v(" getBalanceCFX ")]),t("br"),t("button",{on:{click:function(n){return e.getSecretPrivateCFX("")}}},[e._v(" getSecretPrivateCFX ")]),t("br"),t("button",{on:{click:function(n){return e.signTransactionCFX("","64","44948","1000000000","0","cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7","0x095ea7b300000000000000000000000087bfd2e93c168a0685ebe4afda95108d92a3fa6fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")}}},[e._v(" signTransactionCFX ")]),t("br"),t("button",{on:{click:function(n){return e.signTypeTransactionCFX("","eyJ0eXBlcyI6eyJFSVA3MTJEb21haW4iOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9LHsibmFtZSI6InZlcnNpb24iLCJ0eXBlIjoic3RyaW5nIn0seyJuYW1lIjoiY2hhaW5JZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoidmVyaWZ5aW5nQ29udHJhY3QiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwiUGVybWl0IjpbeyJuYW1lIjoib3duZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InNwZW5kZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6InZhbHVlIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJub25jZSIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiZGVhZGxpbmUiLCJ0eXBlIjoidWludDI1NiJ9XX0sImRvbWFpbiI6eyJuYW1lIjoiTW9vblN3YXAgTFAgVG9rZW4iLCJ2ZXJzaW9uIjoiMSIsImNoYWluSWQiOjEwMjksInZlcmlmeWluZ0NvbnRyYWN0IjoiMHg4RDU0NTExOEQ5MUMwMjdDODA1YzU1MmY2M0E1YzAwYTIwYUU2QWNhIn0sInByaW1hcnlUeXBlIjoiUGVybWl0IiwibWVzc2FnZSI6eyJvd25lciI6IjB4MTBhMDhlRDdFQ2YwMzk1YmEzOTg1NkU5NmNDZDY4QjQ2MThGNUU2MCIsInNwZW5kZXIiOiIweDgwYWU2YTg4Y2UzMzUxZTlmNzI5ZTgxOTlmMjg3MWJhNzg2YWQ3YzUiLCJ2YWx1ZSI6IjE1MTUxMTA3NjgzNjY3MTc3MiIsIm5vbmNlIjoiMHgwMCIsImRlYWRsaW5lIjoxNjMxNzY1MDkzfX0=\n")}}},[e._v(" signTypeTransactionCFX ")]),t("br"),t("button",{on:{click:function(n){return e.getNameToAddressCFX("heisenberg.cfx")}}},[e._v(" getNameToAddressCFX ")]),t("br"),t("button",{on:{click:function(n){return e.getAddressToNameCFX("cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts")}}},[e._v(" getAddressToNameCFX ")]),t("br"),t("button",{on:{click:function(n){return e.toFormatCfx(5272801623497532e4)}}},[e._v(" toFormatCfx ")]),t("br"),t("button",{on:{click:function(n){return e.getGasCfx("cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts","cfx:acam64yj323zd4t1fhybxh3jsg7hu4012yz9kakxs9","0xde0b6b3a7640000","0x5c35083800000000000000000000000000000000000000000000058b918ceb984e0de83a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000010a08ed7ecf0395ba39856e96ccd68b4618f5e600000000000000000000000000000000000000000000000000000000061373df600000000000000000000000000000000000000000000000000000000000000040000000000000000000000008d7df9316faa0586e175b5e6d03c6bda76e3d9500000000000000000000000008b8689c7f3014a4d86e4d1d0daaf74a47f5e0f2700000000000000000000000086d2fb177eff4be03a342951269096265b98ac4600000000000000000000000086424aa36e451e9e22be123933a6ad1c801275fa")}}},[e._v(" getGasCfx ")]),t("br"),t("button",{on:{click:function(n){return e.spendCFX("","cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf","0.001")}}},[e._v(" spendCFX ")]),t("br"),t("button",{on:{click:function(n){return e.spendCFXERC20("","cfx:aamdc4g7d69z916ns7ufcsje58jkr8nx4pkme17dwf","cfx:acf2rcsh8payyxpg6xj7b0ztswwh81ute60tsw35j7","0")}}},[e._v(" spendCFXERC20 ")]),t("br"),t("button",{on:{click:function(n){return e.balanceCFXERC20("cfx:aajmbd017x2dw07dxbnsw5grrc4gdd48pautvt8pts","cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2")}}},[e._v(" balanceCFXERC20 ")]),t("br"),t("br"),t("br"),t("button",{on:{click:function(n){return e.getSecretKeyETH("memory pool equip lesson limb naive endorse advice lift result track gravity")}}},[e._v(" getSecretKeyETH ")]),t("br"),t("button",{on:{click:function(n){return e.getSecretPrivateETH("0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e")}}},[e._v(" getSecretPrivateETH ")]),t("br"),t("button",{on:{click:function(n){return e.getBalanceETH("0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","OKT","https://exchainrpc.okex.org/")}}},[e._v(" getBalanceETH OK ")]),t("button",{on:{click:function(n){return e.getBalanceETH("0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","BSC","https://bsc-dataseed4.ninicoin.io/")}}},[e._v(" getBalanceETH BSC ")]),t("button",{on:{click:function(n){return e.getBalanceETH("0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","HT","https://http-mainnet.hecochain.com/")}}},[e._v(" getBalanceETH HT ")]),t("br"),t("button",{on:{click:function(n){return e.spendETHERC20("0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4","0xF99760E82fB180cC5A313753e4f8EC152D97d3E2","0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2","0","100000000","https://exchainrpc.okex.org/")}}},[e._v(" spendETHERC20 OK ")]),t("button",{on:{click:function(n){return e.spendETHERC20("0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4","0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","0x2859e4544c4bb03966803b044a93563bd2d0dd4d","0","5355000000","https://bsc-dataseed4.ninicoin.io/")}}},[e._v(" spendETHERC20 BSC ")]),t("button",{on:{click:function(n){return e.spendETHERC20("0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4","0xF99760E82fB180cC5A313753e4f8EC152D97d3E2","0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2","0","2777777777","https://http-mainnet.hecochain.com/")}}},[e._v(" spendETHERC20 HT ")]),t("br"),t("button",{on:{click:function(n){return e.spendETH("0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e","0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","0.00001","100000000","https://exchainrpc.okex.org/")}}},[e._v(" spendETH OK ")]),t("button",{on:{click:function(n){return e.spendETH("0x694c7a12eb611ad013dace121d3ca6d761c1d4683f114e9a2a46829f7c2b736e","0x7B8D5430deA51B3fae5c0f0AEA924106666ce0EE","0.00001","6120000000","https://bsc-dataseed4.ninicoin.io/")}}},[e._v(" spendETH BSC ")]),t("button",{on:{click:function(n){return e.spendETH("0xa11041907cccc1c1a3bd85db066d55fc75a2f968128da9bc7b59b714581b9ef4","0xF99760E82fB180cC5A313753e4f8EC152D97d3E2","9999999999","2500000000","https://heco.mytokenpocket.vip")}}},[e._v(" spendETH HT ")]),t("br"),t("button",{on:{click:function(n){return e.balanceETHERC20("0x838a7A7f3e16117763C109d98C79ddCd69F6FD6e","0x382bb369d343125bfb2117af9c149795c6c65c50","OKT","https://exchainrpc.okex.org/")}}},[e._v(" balanceETHERC20 OK ")]),t("button",{on:{click:function(n){return e.balanceETHERC20("0xefdca55e4bce6c1d535cb2d0687b5567eef2ae83","0x55d398326f99059ff775485246999027b3197955","BSC","https://bsc-dataseed4.ninicoin.io/")}}},[e._v(" balanceETHERC20 BSC ")]),t("button",{on:{click:function(n){return e.balanceETHERC20("0xf977814e90da44bfa03b6295a0616a897441acec","0xa71edc38d189767582c38a3145b5873052c3e47a","HT","https://http-mainnet.hecochain.com/")}}},[e._v(" balanceETHERC20 HT ")]),t("br"),t("button",{on:{click:function(n){return e.getGasEth("","0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2","","0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","https://exchainrpc.okex.org/")}}},[e._v(" getGasEth ")]),t("br"),t("button",{on:{click:function(n){return e.signTransactionETH("","140871","276000000","0","0xdf54b6c6195ea4d948d03bfd818d365cf175cfc2","0x095ea7b3000000000000000000000000865bfde337c8afbfff144ff4c29f9404ebb22b15ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","https://exchainrpc.okex.org/")}}},[e._v(" signTransactionETH ")]),t("br"),t("br"),t("br"),t("br"),t("button",{on:{click:function(n){return e.getBalanceAE("ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF")}}},[e._v(" getBalanceAE ")]),t("br"),t("button",{on:{click:function(n){return e.balanceAEX9("ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF","ct_7UfopTwsRuLGFEcsScbYgQ6YnySXuyMxQWhw6fjycnzS5Nyzq")}}},[e._v(" balanceAEx9 ")]),t("br"),t("button",{on:{click:function(n){return e.aeDecodePayload("U3BvbnNvcmVkIGJ5IENoaW5hIEZvdW5kYXRpb27vvIjkuK3lm73ln7rph5HkvJrotZ7liqnvvImr+EQO")}}},[e._v(" aeDecodePayload ")])])},o=[],s=(t("4160"),t("a15b"),t("d3b7"),t("ac1f"),t("25f0"),t("5319"),t("1276"),t("159b"),t("96cf"),t("1da1")),f=t("3115"),i=t("1a80"),u=t("dc66"),l=t("64b1"),p=t("1e04"),d=t("e5a8"),_='\n@compiler >= 6\ninclude "List.aes"\n\ncontract interface FungibleTokenInterface =\n\n  entrypoint balances                      : ()                      => map(address, int)\n  entrypoint balance                       : (address)               => option(int)\n  stateful entrypoint transfer             : (address, int)          => unit\n\n\nmain contract ABCLockContractV3 =\n\n    record info_data = {\n        account      : address,\n        count        : int,\n        token        : int,\n        after_height : int,\n        min_height   : int,\n        height       : int,\n        all_count    : int}\n\n    record account_blacklist = {\n        account : address,\n        count   : int,\n        ae      : int,\n        height  : int}\n\n    record account = {\n        account       : address,\n        mapping_count : int,\n        height        : int}\n\n    record state = {\n        mapping_accounts    : map(address,account),\n        account_blacklists  : map(address,account_blacklist),\n        all_count           : int,\n        token               : FungibleTokenInterface,\n        decimals            : int,\n        base_token_count    : int,\n        max_benefits_height : int,\n        min_benefits_height : int,\n        min_lock_count      : int\n     }\n\n    stateful entrypoint\n        init : (FungibleTokenInterface) => state\n        init (token) =\n            { mapping_accounts    = {},\n              account_blacklists  = {},\n              all_count           = 0,\n              token               = token,\n              decimals            = 1000000000000000000,\n              base_token_count    = 300000000000,\n              max_benefits_height = 9999999,\n              min_benefits_height = 100,\n              min_lock_count      = 1000000000000000000}\n\n    stateful entrypoint\n        mapping_lock : (int) => int\n        mapping_lock(count) =\n            require(!is_mapping_account_blacklist(Call.caller), "IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE")\n            require(!is_mapping_account(Call.caller), "IS_MAPPING_ACCOUNTS_TRUE")\n            require(state.min_lock_count =< count,"MIN_LOCK_COUNT_LOW")\n            require(Chain.balance(Call.caller) > count, "BALANCE_COUNT_LOW")\n            let account = {account = Call.caller , mapping_count = count , height = Chain.block_height}\n            put(state{mapping_accounts[Call.caller] = account, all_count = state.all_count + count})\n            count\n\n    stateful entrypoint\n        mapping_unlock : () => int\n        mapping_unlock() =\n            require(!is_mapping_account_blacklist(Call.caller), "IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE")\n            require(is_mapping_account(Call.caller), "IS_MAPPING_ACCOUNTS_FALSE")\n            let account = get_mapping_account(Call.caller)\n            let new_mapping_accounts = Map.delete(Call.caller,state.mapping_accounts)\n            put(state{mapping_accounts = new_mapping_accounts,all_count = state.all_count - account.mapping_count})\n            account.mapping_count\n\n\n    stateful entrypoint\n        account_check_balance : (address) => bool\n        account_check_balance(addr) =\n            require(is_mapping_account(addr), "IS_MAPPING_ACCOUNTS_FALSE")\n            if(Chain.balance(addr) < get_mapping_account(addr).mapping_count)\n                let account = get_mapping_account(addr)\n                let new_mapping_accounts = Map.delete(addr,state.mapping_accounts)\n                put(state{mapping_accounts = new_mapping_accounts,all_count = state.all_count - account.mapping_count})\n\n                let account_blacklist = {account = addr , count = account.mapping_count ,ae = Chain.balance(addr), height = Chain.block_height}\n                put(state{account_blacklists[addr] = account_blacklist})\n                true\n            else\n                false\n\n    entrypoint\n        is_account_check_balance : (address) => bool\n        is_account_check_balance(addr) =\n            require(is_mapping_account(addr), "IS_MAPPING_ACCOUNTS_FALSE")\n            if(Chain.balance(addr) < get_mapping_account(addr).mapping_count)\n                true\n            else\n                false\n\n    stateful entrypoint\n        benefits : () => int\n        benefits() =\n            require(!is_mapping_account_blacklist(Call.caller), "IS_MAPPING_ACCOUNTS_BLACK_LIST_TRUE")\n            require(is_mapping_account(Call.caller), "IS_MAPPING_ACCOUNTS_FALSE")\n            if(account_check_balance(Call.caller))\n                -1\n            else\n                let account = get_mapping_account(Call.caller)\n                let after_height = Chain.block_height - account.height\n                if(after_height > state.max_benefits_height)\n                    let token_count = state.base_token_count * (account.mapping_count / state.decimals) * state.max_benefits_height\n                    state.token.transfer(account.account,token_count)\n\n                    let update_account = {account = account.account,mapping_count = account.mapping_count,height = Chain.block_height}\n                    put(state{mapping_accounts[Call.caller] = update_account})\n                    token_count\n                else\n                    require(after_height > state.min_benefits_height, "MIN_BENEFITS_HEIGHT")\n                    let token_count = state.base_token_count * (account.mapping_count / state.decimals) * after_height\n                    state.token.transfer(account.account,token_count)\n\n                    let update_account = {account = account.account,mapping_count = account.mapping_count,height = Chain.block_height}\n                    put(state{mapping_accounts[Call.caller] = update_account})\n                    token_count\n\n    entrypoint\n        get_status : () => state\n        get_status()=\n            let state = {\n                mapping_accounts    = {},\n                account_blacklists  = {},\n                all_count           = state.all_count,\n                token               = state.token,\n                decimals            = state.decimals,\n                base_token_count    = state.base_token_count,\n                max_benefits_height = state.max_benefits_height,\n                min_benefits_height = state.min_benefits_height,\n                min_lock_count      = state.min_lock_count}\n            state\n\n    stateful entrypoint\n        update_status : (int,int,int,int,FungibleTokenInterface) => state\n        update_status(base_token_count,max_benefits_height,min_benefits_height,min_lock_count,token)=\n            protocol_restrict()\n            put(state{\n                mapping_accounts    = state.mapping_accounts,\n                account_blacklists  = state.account_blacklists,\n                all_count           = state.all_count,\n                token               = token,\n                decimals            = state.decimals,\n                base_token_count    = base_token_count,\n                max_benefits_height = max_benefits_height,\n                min_benefits_height = min_benefits_height,\n                min_lock_count      = min_lock_count})\n            get_status()\n\n    stateful entrypoint\n        withdraw_token : () => unit\n        withdraw_token() =\n            protocol_restrict()\n            switch(state.token.balance(Contract.address))\n                Some(balance) => state.token.transfer(Contract.creator,balance)\n                None => state.token.transfer(Contract.creator,0)\n\n    stateful entrypoint\n        remove_account_blacklist : (address) => unit\n        remove_account_blacklist(addr) =\n            protocol_restrict()\n            require(is_mapping_account_blacklist(addr), "IS_MAPPING_ACCOUNTS_BLACK_LIST_FALSE")\n            let new_account_blacklists = Map.delete(addr,state.account_blacklists)\n            put(state{account_blacklists = new_account_blacklists})\n\n    entrypoint\n        get_mapping_accounts : ()=> list(address * account)\n        get_mapping_accounts() =\n            let mapping_accounts_list = Map.to_list(state.mapping_accounts)\n            mapping_accounts_list\n\n    entrypoint\n        get_accounts_blacklists : ()=> list(address * account_blacklist)\n        get_accounts_blacklists() =\n            let accounts_blacklists = Map.to_list(state.account_blacklists)\n            accounts_blacklists\n\n    entrypoint\n        get_mapping_account : (address) => account\n        get_mapping_account(addr) =\n            switch(Map.lookup(addr, state.mapping_accounts))\n                Some(account) => account\n                None => {account = Call.caller , mapping_count = 0 , height = -1}\n\n    entrypoint\n        get_account_blacklist : (address) => account_blacklist\n        get_account_blacklist(addr) =\n            switch(Map.lookup(addr, state.account_blacklists))\n                Some(account_blacklist) => account_blacklist\n                None => {account = Call.caller , count = 0 ,ae = 0, height = -1}\n\n    entrypoint\n        get_data_info : (address) => info_data\n        get_data_info(addr) =\n            let account = get_mapping_account(addr)\n            let after_height = Chain.block_height - account.height\n            let token_count  = state.base_token_count * (account.mapping_count / state.decimals) * after_height\n            {   account      = addr,\n                count        = account.mapping_count,\n                token        = token_count,\n                min_height   = state.min_benefits_height,\n                after_height = after_height,\n                height       = account.height,\n                all_count    = state.all_count}\n\n\n\n    function\n        is_mapping_account : (address) => bool\n        is_mapping_account(addr) =\n            switch(Map.lookup(addr, state.mapping_accounts))\n                Some(account) => true\n                None => false\n\n    function\n        is_mapping_account_blacklist : (address) => bool\n        is_mapping_account_blacklist(addr) =\n            switch(Map.lookup(addr, state.account_blacklists))\n                Some(int) => true\n                None => false\n\n    function\n        protocol_restrict : () => unit\n        protocol_restrict() =\n            require(Call.origin == Contract.creator, "PROTOCOL_RESTRICTED")\n\n\n\n\n\n\t',y='\n// ISC License\n//\n// Copyright (c) 2017, aeternity developers\n//\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n// PERFORMANCE OF THIS SOFTWARE.\n\n\n// THIS IS NOT SECURITY AUDITED\n// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST\n\n@compiler >= 5\n\ninclude "Option.aes"\ninclude "String.aes"\n\n/// @title - Fungible token with all the extensions - burn, mint, allowances\ncontract FungibleTokenFull =\n\n  // This defines the state of type record encapsulating the contract\'s mutable state\n  record state =\n    { owner        : address      // the smart contract\'s owner address\n    , total_supply : int          // total token supply\n    , balances     : balances     // balances for each account\n    , meta_info    : meta_info    // token meta info (name, symbol, decimals)\n    , allowances   : allowances   // owner of account approves the transfer of an amount to another account\n    , swapped      : map(address, int) }\n\n  // This is the meta-information record type\n  record meta_info =\n    { name     : string\n    , symbol   : string\n    , decimals : int }\n\n  // This is the format of allowance record type that will be used in the state\n  record allowance_accounts = { from_account : address, for_account : address }\n\n  // This is a type alias for the balances map\n  type balances = map(address, int)\n\n  // This is a type alias for the allowances map\n  type allowances = map(allowance_accounts, int)\n\n  // Declaration and structure of datatype event\n  // and events that will be emitted on changes\n  datatype event =\n    Transfer(address, address, int)\n    | Allowance(address, address, int)\n    | Burn(address, int)\n    | Mint(address, int)\n    | Swap(address, int)\n\n  // List of supported extensions\n  entrypoint aex9_extensions() : list(string) = ["allowances", "mintable", "burnable", "swappable"]\n\n  // Create a fungible token with\n  // the following `name` `symbol` and `decimals`\n  // and set the inital smart contract state\n  entrypoint init(name: string, decimals : int, symbol : string, initial_owner_balance : option(int)) =\n    // If the `name` lenght is less than 1 symbol abort the execution\n    require(String.length(name) >= 1, "STRING_TOO_SHORT_NAME")\n    // If the `symbol` length is less than 1 symbol abort the execution\n    require(String.length(symbol) >= 1, "STRING_TOO_SHORT_SYMBOL")\n    // If the provided value for `decimals` is negative abort the execution\n    require_non_negative_value(decimals)\n    // If negative initial owner balance is passed, abort the execution\n    let initial_supply = Option.default(0, initial_owner_balance)\n    require_non_negative_value(initial_supply)\n\n    let owner = Call.caller\n    { owner        = owner,\n      total_supply = initial_supply,\n      balances     = Option.match({}, (balance) => { [owner] = balance }, initial_owner_balance),\n      meta_info    = { name = name, symbol = symbol, decimals = decimals },\n      allowances   = {},\n      swapped      = {} }\n\n  // Get the token meta info\n  entrypoint meta_info() : meta_info =\n    state.meta_info\n\n  // Get the token total supply\n  entrypoint total_supply() : int =\n    state.total_supply\n\n  // Get the token owner address\n  entrypoint owner() : address =\n    state.owner\n\n  // Get the balances state\n  entrypoint balances() : balances =\n    state.balances\n\n  // Get balance for address of `owner`\n  // returns option(int)\n  // If the `owner` address haven\'t had any token balance\n  // in this smart contract the return value is None\n  // Otherwise Some(int) is returned with the current balance\n  entrypoint balance(account: address) : option(int) =\n    Map.lookup(account, state.balances)\n\n  // Get all swapped tokens stored in state\n  entrypoint swapped() : map(address, int) =\n    state.swapped\n\n  // Get the allowances state\n  entrypoint allowances() : allowances =\n    state.allowances\n\n  // Get the allowance for passed `allowance_accounts` record\n  // returns option(int)\n  // This will lookup and return the allowed spendable amount\n  // from one address for another\n  // If there is no such allowance present result is None\n  // Otherwise Some(int) is returned with the allowance amount\n  entrypoint allowance(allowance_accounts : allowance_accounts) : option(int) =\n    Map.lookup(allowance_accounts, state.allowances)\n\n  // Get the allowance for caller from `from_account` address\n  // returns option(int)\n  // This will look up the allowances and return the allowed spendable amount\n  // from `from_account` for the transaction sender `Call.caller`\n  // If there is no such allowance present result is None\n  // Otherwise Some(int) is returned with the allowance amount\n  entrypoint allowance_for_caller(from_account: address) : option(int) =\n    allowance({ from_account = from_account, for_account = Call.caller })\n\n  // Send `value` amount of tokens from address `from_account` to address `to_account`\n  // The transfer_allowance method is used for a withdraw workflow, allowing contracts to send\n  // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n  // fees in sub-token contract.\n  // The execution will abort and fail if there is no allowance set up previous this call\n  stateful entrypoint transfer_allowance(from_account: address, to_account: address, value: int) =\n    let allowance_accounts = { from_account = from_account, for_account = Call.caller }\n    internal_transfer(from_account, to_account, value)\n    internal_change_allowance(allowance_accounts, -value)\n\n  // Create allowance for `for_account` to withdraw from your account `Call.caller`,\n  // multiple times, up to the `value` amount.\n  // This function will abort and fail if called again when there is allowance\n  // already set for these particular accounts pair.\n  stateful entrypoint create_allowance(for_account: address, value: int) =\n    // Check if the passed value is not negative\n    require_non_negative_value(value)\n    // Set the allowance account pair in the memory variable\n    let allowance_accounts = { from_account =  Call.caller, for_account = for_account }\n    // Check if there is no allowance already present in the state\n    // for these particular accounts pair.\n    require_allowance_not_existent(allowance_accounts)\n    // Save the allowance value for these accounts pair in the state\n    put(state{ allowances[allowance_accounts] = value })\n    // Fire Allowance event to include it in the transaction event log\n    Chain.event(Allowance(Call.caller, for_account, value))\n\n  // Allows to change the allowed spendable value for `for_account` with `value_change`\n  stateful entrypoint change_allowance(for_account: address, value_change: int) =\n    let allowance_accounts = { from_account =  Call.caller, for_account = for_account }\n    internal_change_allowance(allowance_accounts, value_change)\n\n  // Resets the allowance given `for_account` to zero.\n  stateful entrypoint reset_allowance(for_account: address) =\n    let allowance_accounts = { from_account = Call.caller, for_account = for_account }\n    internal_change_allowance(allowance_accounts, - state.allowances[allowance_accounts])\n\n  /// Transfer the balance of `value` from `Call.caller` to `to_account` account\n  stateful entrypoint transfer(to_account: address, value: int) =\n    internal_transfer(Call.caller, to_account, value)\n\n  // Destroys `value` tokens from `Call.caller`, reducing the total supply.\n  // `Burn` event with `Call.caller` address and `value`.\n  stateful entrypoint burn(value: int) =\n    require_balance(Call.caller, value)\n    require_non_negative_value(value)\n    put(state{ total_supply = state.total_supply - value, balances[Call.caller] @ b = b - value })\n    Chain.event(Burn(Call.caller, value))\n\n  // Creates `value` tokens and assigns them to `account`, increasing the total supply.\n  // Emits a `Mint` event with `account` and `value`.\n  stateful entrypoint mint(account: address, value: int) =\n    require_owner()\n    require_non_negative_value(value)\n    put(state{ total_supply = state.total_supply + value, balances[account = 0] @ b = b + value })\n    Chain.event(Mint(account, value))\n\n  stateful entrypoint swap() =\n    let balance = Map.lookup_default(Call.caller, state.balances, 0)\n    burn(balance)\n    put(state{ swapped[Call.caller] = balance })\n    Chain.event(Swap(Call.caller, balance))\n\n  stateful entrypoint check_swap(account: address) : int =\n    Map.lookup_default(account, state.swapped, 0)\n\n  // INTERNAL FUNCTIONS\n\n  function require_owner() =\n    require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")\n\n  function require_non_negative_value(value : int) =\n    require(value >= 0, "NON_NEGATIVE_VALUE_REQUIRED")\n\n  function require_balance(account : address, value : int) =\n    switch(balance(account))\n      Some(balance) =>\n        require(balance >= value, "ACCOUNT_INSUFFICIENT_BALANCE")\n      None => abort("BALANCE_ACCOUNT_NOT_EXISTENT")\n\n  stateful function internal_transfer(from_account: address, to_account: address, value: int) =\n    require_non_negative_value(value)\n    require_balance(from_account, value)\n    put(state{ balances[from_account] @ b = b - value })\n    put(state{ balances[to_account = 0] @ b = b + value })\n    Chain.event(Transfer(from_account, to_account, value))\n\n  function require_allowance_not_existent(allowance_accounts : allowance_accounts) =\n    switch(allowance(allowance_accounts))\n      None => None\n      Some(_) => abort("ALLOWANCE_ALREADY_EXISTENT")\n\n  function require_allowance(allowance_accounts : allowance_accounts, value : int) : int =\n    switch(allowance(allowance_accounts))\n      Some(allowance) =>\n        require_non_negative_value(allowance + value)\n        allowance\n      None => abort("ALLOWANCE_NOT_EXISTENT")\n\n  stateful function internal_change_allowance(allowance_accounts : allowance_accounts, value_change : int) =\n    let allowance = require_allowance(allowance_accounts, value_change)\n    let new_allowance = allowance + value_change\n    require_non_negative_value(new_allowance)\n    put(state{ allowances[allowance_accounts] = new_allowance })\n    Chain.event(Allowance(allowance_accounts.from_account, allowance_accounts.for_account, new_allowance))\n\n\t\t',b='\n@compiler >= 6\ninclude "List.aes"\n\ncontract interface FungibleTokenInterface =\n\n    stateful entrypoint transfer_allowance   : (address, address, int) => unit\n    stateful entrypoint transfer             : (address, int)          => unit\n    entrypoint balance                       : (address)               => option(int)\n\npayable main contract BoxSwapContractV2 =\n\n    record coin = {\n        token           : FungibleTokenInterface,\n        coin_name       : string,\n        low_token_count : int,\n        low_ae_count    : int,\n        rate_swap       : int,\n        rate_cancel     : int,\n        freeze          : int,\n        bonus_address   : address}\n\n    record account = {\n        account       : address,\n        coin_name     : string,\n        token         : FungibleTokenInterface,\n        create_time   : int,\n        create_height : int,\n        token_count   : int,\n        ae_count      : int}\n\n    record order = {\n        buy_address   : address,\n        sell_address  : address,\n        create_time   : int,\n        create_height : int,\n        pay_time      : int,\n        pay_height    : int,\n        coin_name     : string,\n        token_count   : int,\n        ae_count      : int}\n\n    record swaps_account = {\n        coin_account : map(address, account),\n        transaction  : int}\n\n    record state = {\n        coin_swaps   : map(FungibleTokenInterface, swaps_account),\n        coins        : map(FungibleTokenInterface, coin),\n        coin_account : map(address, map(FungibleTokenInterface, account)),\n        records      : map(address, list(order)),\n        owner        : address,\n        percentage   : int,\n        record_size  : int,\n        decimals     : int}\n\n    stateful entrypoint\n        init : () => state\n        init () =\n            let owner = Call.caller\n            { coin_swaps   = {},\n              coins        = {},\n              coin_account = {},\n              records      = {},\n              owner        = owner,\n              percentage   = 1000,\n              record_size  = 1,\n              decimals     = 1000000000000000000}\n\n\n    stateful entrypoint\n        add_coin : (FungibleTokenInterface,string,int,int,int,int,address) => coin\n        add_coin(ct_address,coin_name,low_token_count,low_ae_count,rate_swap,rate_cancel,bonus_address) =\n            protocol_restrict()\n            require(!is_coin_exist(ct_address), "IS_COIN_EXIST_TRUE")\n            let coin = { token           = ct_address,\n                         coin_name       = coin_name,\n                         low_token_count = low_token_count,\n                         low_ae_count    = low_ae_count,\n                         rate_swap       = rate_swap,\n                         rate_cancel     = rate_cancel,\n                         freeze          = 0,\n                         bonus_address   = bonus_address}\n            put(state{coins[ct_address] = coin})\n            put(state{coin_swaps[ct_address] = { coin_account = {},\n                                                 transaction  = 0}})\n            coin\n\n    stateful entrypoint\n        update_coin : (FungibleTokenInterface,string,int,int,int,int,int,address) => coin\n        update_coin(ct_address,coin_name,low_token_count,low_ae_count,rate_swap,rate_cancel,freeze,bonus_address) =\n            protocol_restrict()\n            require(is_coin_exist(ct_address), "IS_COIN_EXIST_FALSE")\n\n            let coin = get_coin(ct_address)\n            let new_coin = { token           = coin.token,\n                             coin_name       = coin_name,\n                             low_token_count = low_token_count,\n                             low_ae_count    = low_ae_count,\n                             rate_swap       = rate_swap,\n                             rate_cancel     = rate_cancel,\n                             freeze          = freeze,\n                             bonus_address   = bonus_address}\n            put(state{coins[ct_address] = new_coin})\n            new_coin\n\n\n    stateful entrypoint\n        sell : (FungibleTokenInterface,int,int) => int\n        sell(ct_address,token_count,ae_count) =\n            require(is_coin_exist(ct_address),"IS_COIN_EXIST_FALSE")\n            require(!is_swap_account_exist(ct_address,Call.caller),"IS_COIN_ACCOUNT_EXIST_TRUE")\n            let coin = get_coin(ct_address)\n            require(token_count >= coin.low_token_count,"LOW_TOKEN_COUNT_LOW_TRUE")\n            require(token_count >= coin.low_ae_count,"LOW_AE_COUNT_LOW_TRUE")\n            require(coin.freeze == 0,"COIN_FREEZE")\n            coin.token.transfer_allowance(Call.caller,Contract.address,token_count)\n            let account = { account       = Call.caller,\n                            coin_name     = coin.coin_name,\n                            token         = coin.token,\n                            create_time   = Chain.timestamp,\n                            create_height = Chain.block_height,\n                            token_count   = token_count,\n                            ae_count      = ae_count}\n            let swaps_account = get_swap_accounts(ct_address)\n            let new_swaps_account = swaps_account{ coin_account[Call.caller] = account,\n                                                   transaction               = swaps_account.transaction}\n            let account_coin_map = get_coin_account_map(Call.caller)\n\n            put(state{coin_account[Call.caller = account_coin_map][ct_address] = account})\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            ae_count\n\n    stateful entrypoint\n        cancel : (FungibleTokenInterface) => int\n        cancel(ct_address) =\n            require(is_coin_exist(ct_address),"IS_COIN_EXIST_FALSE")\n            require(is_swap_account_exist(ct_address,Call.caller),"IS_COIN_ACCOUNT_EXIST_FALSE")\n            let account = get_swap_account(ct_address,Call.caller)\n            let coin = get_coin(ct_address)\n            require(coin.freeze == 0,"COIN_FREEZE")\n            coin.token.transfer(account.account,\n                                account.token_count *\n                                (state.percentage - coin.rate_cancel) /\n                                state.percentage)\n            coin.token.transfer(coin.bonus_address,\n                                account.token_count *\n                                coin.rate_cancel /\n                                state.percentage)\n            let coin = get_coin(ct_address)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(Call.caller, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{ coin_account = delete_accounts,\n                                                   transaction  = swaps_account.transaction}\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(Call.caller))\n            put(state{coin_account[Call.caller] = account_coin_map})\n            account.token_count\n\n    stateful entrypoint\n        cancel_address : (FungibleTokenInterface,address) => int\n        cancel_address(ct_address,addr) =\n            protocol_restrict()\n            require(is_coin_exist(ct_address),"IS_COIN_EXIST_FALSE")\n            require(is_swap_account_exist(ct_address,addr),"IS_COIN_ACCOUNT_EXIST_FALSE")\n            let account = get_swap_account(ct_address,addr)\n            let coin = get_coin(ct_address)\n            coin.token.transfer(account.account, account.token_count)\n            let coin = get_coin(ct_address)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(addr, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{ coin_account = delete_accounts,\n                                                   transaction  = swaps_account.transaction}\n            put(state{coin_swaps[ct_address] = new_swaps_account})\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(addr))\n            put(state{coin_account[addr] = account_coin_map})\n            account.token_count\n\n\n    payable stateful entrypoint\n        buy : (FungibleTokenInterface,address) => account\n        buy(ct_address,addr) =\n            require(is_coin_exist(ct_address),"IS_COIN_EXIST_FALSE")\n            require(is_swap_account_exist(ct_address,addr),"IS_COIN_ACCOUNT_EXIST_FALSE")\n            let account = get_swap_account(ct_address,addr)\n            require(Call.value =< account.ae_count,"AE_VALUE_LOW")\n            let coin = get_coin(ct_address)\n            require(coin.freeze == 0,"COIN_FREEZE")\n            coin.token.transfer(Call.caller,\n                                account.token_count *\n                                (state.percentage - coin.rate_swap) /\n                                state.percentage)\n            coin.token.transfer(coin.bonus_address,\n                                account.token_count *\n                                coin.rate_swap /\n                                state.percentage)\n            Chain.spend(account.account,\n                        Call.value *\n                        (state.percentage - coin.rate_swap) /\n                        state.percentage)\n            Chain.spend(coin.bonus_address,\n                        Call.value *\n                        coin.rate_swap /\n                        state.percentage)\n            let swaps_account = get_swap_accounts(ct_address)\n            let delete_accounts = Map.delete(account.account, swaps_account.coin_account)\n            let new_swaps_account = swaps_account{coin_account = delete_accounts,\n                                                  transaction  = swaps_account.transaction + account.ae_count / state.decimals}\n            put(state{ coin_swaps[ct_address] = new_swaps_account})\n\n            let account_coin_map = Map.delete(coin.token,get_coin_account_map(account.account))\n            put(state{coin_account[account.account] = account_coin_map})\n\n            let order = { buy_address = Call.caller,\n                          sell_address  = account.account,\n                          create_time   = account.create_time,\n                          create_height = account.create_height,\n                          pay_time      = Chain.timestamp,\n                          pay_height    = Chain.block_height,\n                          coin_name     = account.coin_name,\n                          token_count   = account.token_count,\n                          ae_count      = Call.value}\n            let account_record = get_accounts_records(Call.caller)\n            if(List.length(account_record) >= state.record_size)\n                let account_record = List.drop(List.length(account_record), account_record)\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[Call.caller] = account_record})\n            else\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[Call.caller] = account_record})\n\n            let account_record = get_accounts_records(account.account)\n            if(List.length(account_record) >= state.record_size)\n                let account_record = List.drop(List.length(account_record), account_record)\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[account.account] = account_record})\n            else\n                let account_record = List.insert_at(0, order, account_record)\n                put(state{ records[account.account] = account_record})\n\n            account\n\n    entrypoint\n        get_status : () => state\n        get_status()=\n            let state = { coin_swaps   = {},\n                          coins        = {},\n                          coin_account = {},\n                          records      = {},\n                          owner        = state.owner,\n                          percentage   = state.percentage,\n                          record_size  = state.record_size,\n                          decimals     = state.decimals}\n            state\n\n    stateful entrypoint\n        update_record_size : (int) => state\n        update_record_size(record_size)=\n            put(state {record_size = state.record_size})\n            state\n\n    entrypoint\n        get_my_swap_account : (FungibleTokenInterface,address) => account\n        get_my_swap_account(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => account\n\n    entrypoint\n        get_my_swap_account_coins : (address) => map(FungibleTokenInterface, account)\n        get_my_swap_account_coins(addr) =\n            switch(Map.lookup(addr, state.coin_account))\n                Some(account) => account\n                None => {}\n\n    entrypoint\n        get_accounts_records : (address) => list(order)\n        get_accounts_records(addr) =\n            switch(Map.lookup(addr, state.records))\n                Some(orders) => orders\n                None => []\n\n\n    stateful entrypoint\n        withdraw_token : (FungibleTokenInterface) => int\n        withdraw_token(token) =\n            protocol_restrict()\n            switch(token.balance(Contract.address))\n                Some(balance) => token.transfer(Contract.creator,balance)\n                None => token.transfer(Contract.creator,0)\n\n            switch(token.balance(Contract.address))\n                Some(balance) => balance\n                None => 0\n\n\n    entrypoint\n        get_coins : () => map(FungibleTokenInterface, coin)\n        get_coins() =\n            state.coins\n\n\n    entrypoint\n        get_swap_accounts : (FungibleTokenInterface) => swaps_account\n        get_swap_accounts(ct_address) =\n            switch(Map.lookup(ct_address, state.coin_swaps))\n                Some(swaps_account) => swaps_account\n    entrypoint\n        get_coin_account_map : (address) => map(FungibleTokenInterface, account)\n        get_coin_account_map(addr) =\n            switch(Map.lookup(addr, state.coin_account))\n                Some(account_map) => account_map\n                None => {}\n    function\n        is_swap_account_exist : (FungibleTokenInterface,address) => bool\n        is_swap_account_exist(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => true\n                None => false\n\n    function\n        get_swap_account : (FungibleTokenInterface,address) => account\n        get_swap_account(ct_address,account) =\n            switch(Map.lookup(account, state.coin_swaps[ct_address].coin_account))\n                Some(account) => account\n\n\n\n\n\n    function\n        is_coin_exist : (FungibleTokenInterface) => bool\n        is_coin_exist(ct_address) =\n            switch(Map.lookup(ct_address, state.coins))\n                Some(coin) => true\n                None => false\n\n    function\n        get_coin : (FungibleTokenInterface) => coin\n        get_coin(ct_address) =\n            switch(Map.lookup(ct_address, state.coins))\n                Some(coin) => coin\n\n    function\n        protocol_restrict : () => unit\n        protocol_restrict() =\n            require(Call.origin == Contract.creator, "PROTOCOL_RESTRICTED")\n\n\n\n\n\n\n\n\n',m=t("3140"),g=t("8f31"),h=t("e762"),w=t("3b59"),v=w.abi,T=t("58e1"),k=t("c834"),x=t("cc9e"),C=t("2c0b"),S=t("c030"),E="https://node.aeasy.io/",I="https://debug.aeasy.io",R="https://compiler.aeasy.io/",M="https://main.confluxrpc.com",O="===========================",A=!0;function N(e){var n=(new Date).getTime();while((new Date).getTime()-n<e);}var F={name:"HelloWorld",props:{msg:String},data:function(){return{}},mounted:function(){var e=this;window["getBalanceETH"]=function(n,t,a){e.getBalanceETH(n,t,a)},window["spendETHERC20"]=function(n,t,a,r,c,o){e.spendETHERC20(n,t,a,r,c,o)},window["spendETH"]=function(n,t,a,r,c){e.spendETH(n,t,a,r,c)},window["getSecretKeyETH"]=function(n){e.getSecretKeyETH(n)},window["getSecretPrivateETH"]=function(n){e.getSecretPrivateETH(n)},window["balanceETHERC20"]=function(n,t,a,r){e.balanceETHERC20(n,t,a,r)},window["getGasEth"]=function(n,t,a,r,c){e.getGasEth(n,t,a,r,c)},window["signTransactionETH"]=function(n,t,a,r,c,o,s){e.signTransactionETH(n,t,a,r,c,o,s)},window["signTypeTransactionETH"]=function(n,t,a){e.signTypeTransactionETH(n,t,a)},window["getMnemonicCFX"]=function(){e.getMnemonicCFX()},window["balanceCFXERC20"]=function(n,t){e.balanceCFXERC20(n,t)},window["getGasCfx"]=function(n,t,a,r){e.getGasCfx(n,t,a,r)},window["getSecretKeyCFX"]=function(n){e.getSecretKeyCFX(n)},window["getSecretPrivateCFX"]=function(n){e.getSecretPrivateCFX(n)},window["getBalanceCFX"]=function(n){e.getBalanceCFX(n)},window["toFormatCfx"]=function(n){e.toFormatCfx(n)},window["spendCFX"]=function(n,t,a){e.spendCFX(n,t,a)},window["spendCFXERC20"]=function(n,t,a,r){e.spendCFXERC20(n,t,a,r)},window["signTransactionCFX"]=function(n,t,a,r,c,o,s){e.signTransactionCFX(n,t,a,r,c,o,s)},window["signTypeTransactionCFX"]=function(n,t){e.signTypeTransactionCFX(n,t)},window["getNameToAddressCFX"]=function(n){e.getNameToAddressCFX(n)},window["getAddressToNameCFX"]=function(n){e.getAddressToNameCFX(n)},window["aeDecodePayload"]=function(n){e.aeDecodePayload(n)},window["getBalanceAE"]=function(n){e.getBalanceAE(n)},window["balanceAEX9"]=function(n,t){e.balanceAEX9(n,t)},window["getMnemonic"]=function(){e.getMnemonic()},window["spend"]=function(n,t,a,r,c){e.spend(n,t,a,r,c)},window["sign"]=function(n,t){e.sign(n,t)},window["setNodeCompilerUrl"]=function(n,t){e.setNodeCompilerUrl(n,t)},window["setCfxNodeUrl"]=function(n){e.setCfxNodeUrl(n)},window["getSecretKey"]=function(n){e.getSecretKey(n)},window["validationMnemonic"]=function(n){e.validationMnemonic(n)},window["updateName"]=function(n,t,a,r){e.updateName(n,t,a,r)},window["bidName"]=function(n,t,a,r){e.bidName(n,t,a,r)},window["claimName"]=function(n,t,a){e.claimName(n,t,a)},window["transferName"]=function(n,t,a,r){e.transferName(n,t,a,r)},window["contractDefiV3Lock"]=function(n,t,a,r){e.contractDefiV3Lock(n,t,a,r)},window["contractDefiV3UnLock"]=function(n,t,a){e.contractDefiV3UnLock(n,t,a)},window["contractDefiV3Benefits"]=function(n,t,a){e.contractDefiV3Benefits(n,t,a)},window["contractTransfer"]=function(n,t,a,r,c){e.contractTransfer(n,t,a,r,c)},window["contractSwapSell"]=function(n,t,a,r,c,o,s){e.contractSwapSell(n,t,a,r,c,o,s)},window["contractSwapBuy"]=function(n,t,a,r,c,o){e.contractSwapBuy(n,t,a,r,c,o)},window["contractSwapCancel"]=function(n,t,a,r){e.contractSwapCancel(n,t,a,r)},window["initWallet"]=function(n,t,a){e.initWallet(n,t,a)}},methods:{toFormatCfx:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:A?toFormatCfx_JS.postMessage(f["a"].toAe(n.toString(10))):console.log(f["a"].toAe(n.toString(10)));case 1:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),getGasCfx:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,c=new g["Conflux"]({url:M,networkId:1029}),e.next=4,c.estimateGasAndCollateral({from:n,to:t,value:a,data:r});case 4:o=e.sent,A?getGasCfx_JS.postMessage(o["gasLimit"].toString(10)+"#"+o["gasUsed"].toString(10)+"#"+o["storageCollateralized"].toString(10)):(console.log(o["gasLimit"].toString(10)),console.log(o["gasUsed"].toString(10)),console.log(o["storageCollateralized"].toString(10)),console.log(o)),e.next=11;break;case 8:e.prev=8,e.t0=e["catch"](0),A?getGasCfx_JS.postMessage("ERROR:"+e.t0.data):console.log(e.t0);case 11:case"end":return e.stop()}}),e,null,[[0,8]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),getGasEth:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c){var o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,o=new S.providers.JsonRpcProvider(c),e.next=4,o.estimateGas({from:n,to:t,value:a,data:r});case 4:s=e.sent,A?getGasEth_JS.postMessage(s.toString(10)):console.log(s.toString(10)),e.next=11;break;case 8:e.prev=8,e.t0=e["catch"](0),A?getGasEth_JS.postMessage("ERROR:"+e.t0.toString()):console.log(e.t0);case 11:case"end":return e.stop()}}),e,null,[[0,8]])})));function n(n,t,a,r,c){return e.apply(this,arguments)}return n}(),getNameToAddressCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a,r,c,o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,t=new g["Conflux"]({url:M,networkId:1029}),a=t.Contract({abi:T,address:"cfx:acdzztjdv0vcx2z2znt296y6sd4hujswean18n0gxy"}),r=C.hash(n),e.next=6,a.resolverOf(r).call();case 6:return c=e.sent,o=t.Contract({abi:k,address:c}),e.next=10,o.get(r,"wallet.CFX.address");case 10:s=e.sent,A?getNameToAddressCFX_JS.postMessage(s):console.log("cfxAddress："+s),e.next=17;break;case 14:e.prev=14,e.t0=e["catch"](0),A?getNameToAddressCFX_JS.postMessage("ERROR"):console.log("cfxAddress："+e.t0);case 17:case"end":return e.stop()}}),e,null,[[0,14]])})));function n(n){return e.apply(this,arguments)}return n}(),getAddressToNameCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,t=new g["Conflux"]({url:M,networkId:1029}),a=t.Contract({abi:k,address:"cfx:acc5abps9s20t1axga4m1d4az193517kuyf23r4mcn"}),e.next=5,a.getName(n);case 5:r=e.sent,A?getAddressToNameCFX_JS.postMessage(r):console.log("name："+r),e.next=12;break;case 9:e.prev=9,e.t0=e["catch"](0),A?getAddressToNameCFX_JS.postMessage("ERROR"):console.log("name："+e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})));function n(n){return e.apply(this,arguments)}return n}(),aeDecodePayload:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:try{t=h["a"].decode(n),A?aeDecodePayload_JS.postMessage(t.substring(0,t.length-4)):console.log(t.substring(0,t.length-4))}catch(a){A?aeDecodePayload_JS.postMessage(n):console.log(n)}case 1:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),getMnemonicCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(){var n,t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return n=new g["Conflux"]({url:M,networkId:1029}),t=i["a"].generateMnemonic(),e.next=4,x.getNthAccountOfHDKey({mnemonic:t,nth:0,only0x1Prefixed:!1});case 4:a=e.sent,r=n.wallet.addPrivateKey(a.privateKey),A?getMnemonicCFX_JS.postMessage(r.address+"#"+r.privateKey+"#"+t):console.log(r.address+"#"+r.privateKey+"#"+t);case 7:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),getMnemonicETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(){var n,t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return n=new g["Conflux"]({url:M,networkId:1029}),t=i["a"].generateMnemonic(),e.next=4,x.getNthAccountOfHDKey({mnemonic:t,nth:0,only0x1Prefixed:!1});case 4:a=e.sent,r=n.wallet.addPrivateKey(a.privateKey),A?getMnemonicCFX_JS.postMessage(r.address+"#"+r.privateKey+"#"+t):console.log(r.address+"#"+r.privateKey+"#"+t);case 7:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),getSecretKeyCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=new g["Conflux"]({url:M,networkId:1029}),e.next=3,x.getNthAccountOfHDKey({mnemonic:n,nth:0,only0x1Prefixed:!1});case 3:a=e.sent,r=t.wallet.addPrivateKey(a.privateKey),A?getSecretKeyCFX_JS.postMessage(r.address+"#"+r.privateKey+"#"+n):console.log(r.address+"#"+r.privateKey+"#"+n);case 6:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),getSecretKeyETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:t=S.Wallet.fromMnemonic(n),a=t.privateKey,r=t.address,A?getSecretKeyETH_JS.postMessage(r+"#"+a+"#"+n):console.log(r+"#"+a+"#"+n);case 4:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),getBalanceAE:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j("d03826de64d010f683b4aee0ac67e074e01725bb6f94c6d26942ab5a5671886a5e88d722246295cefec3143d2cf2212347aac960d0b3ea4abe03fba86ce0dc2e","ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF");case 2:return t=e.sent,e.prev=3,e.next=6,t.balance(n);case 6:if(a=e.sent,A){e.next=10;break}return console.log(f["a"].toAe(a)),e.abrupt("return");case 10:getBalanceAE_JS.postMessage(a),e.next=20;break;case 13:if(e.prev=13,e.t0=e["catch"](3),A){e.next=18;break}return console.log(e.t0.toString()),e.abrupt("return");case 18:getBalanceAE_JS.postMessage("account error"),J(e.t0);case 20:case"end":return e.stop()}}),e,null,[[3,13]])})));function n(n){return e.apply(this,arguments)}return n}(),getBalanceETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,r=new S.providers.JsonRpcProvider(a),e.next=4,r.getBalance(n);case 4:c=e.sent,o=S.utils.formatEther(c),A?getBalanceETH_JS.postMessage(o.toString()+"#"+t):console.log("Balance: "+o),e.next=12;break;case 9:e.prev=9,e.t0=e["catch"](0),A?getBalanceETH_JS.postMessage("account error#"):console.log("account error");case 12:case"end":return e.stop()}}),e,null,[[0,9]])})));function n(n,t,a){return e.apply(this,arguments)}return n}(),getBalanceCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,t=new g["Conflux"]({url:M,networkId:1029}),e.next=4,t.getBalance(n);case 4:a=e.sent,A?getBalanceCFX_JS.postMessage(f["a"].toAe(a)):console.log(f["a"].toAe(a)),e.next=11;break;case 8:e.prev=8,e.t0=e["catch"](0),A?getBalanceCFX_JS.postMessage("account error:"+e.t0.data):console.log("account error");case 11:case"end":return e.stop()}}),e,null,[[0,8]])})));function n(n){return e.apply(this,arguments)}return n}(),getSecretPrivateETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:try{t=new S.Wallet(n),a=t.privateKey,r=t.address,A?getSecretKeyETH_JS.postMessage(r+"#"+a+"#"):console.log(r+"#"+a+"#")}catch(c){A?getSecretKeyETH_JS.postMessage("##"):(console.log(c.toString()),console.log(c.toString()+"##"))}case 1:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),getSecretPrivateCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n){var t,a;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:try{t=new g["Conflux"]({url:M,networkId:1029}),a=t.wallet.addPrivateKey(n),A?getSecretKeyCFX_JS.postMessage(a.address+"#"+a.privateKey+"#"):console.log(a.address+"#"+a.privateKey+"#")}catch(r){A?getSecretKeyCFX_JS.postMessage("##"):console.log("##")}case 1:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}(),spendCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o,s,f,i,u,l;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,r=new g["Conflux"]({url:M,networkId:1029}),c=r.wallet.addPrivateKey(n),o=g["Drip"].fromCFX(a),s=g["Drip"].fromGDrip(1),f=t,i={from:c.address,gasPrice:s,gas:23200,to:f,value:o,storageLimit:0,chainId:status.chainId,data:null},console.log(JSON.stringify(i,null,2)),e.next=10,r.sendTransaction(i);case 10:u=e.sent,console.log(u),l=null;case 13:return e.next=16,r.getTransactionReceipt(u);case 16:if(l=e.sent,!l){e.next=19;break}return e.abrupt("break",24);case 19:return console.log("tx not executed"),e.next=22,new Promise((function(e){return setTimeout(e,1e3)}));case 22:e.next=13;break;case 24:console.log("receipt",JSON.stringify(l,null,2)),A?(U("sucess"),spendCFX_JS.postMessage(u)):console.log(u),e.next=31;break;case 28:e.prev=28,e.t0=e["catch"](0),J(e.t0.data);case 31:case"end":return e.stop()}}),e,null,[[0,28]])})));function n(n,t,a){return e.apply(this,arguments)}return n}(),spendETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c){var o,s,i,u,l,p,d;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,o=new S.providers.JsonRpcProvider(c),s=new S.Wallet(n,o),e.next=5,s.getTransactionCount();case 5:return i=e.sent,u={nonce:i,gasLimit:25e3,gasPrice:S.utils.parseEther(f["a"].toAe(r)),to:t,value:S.utils.parseEther(a),data:""},e.next=9,s.sendTransaction(u);case 9:l=e.sent,A?(U("sucess"),spendETH_JS.postMessage(l.hash)):console.log("txHash:"+l.hash),e.next=28;break;case 13:if(e.prev=13,e.t0=e["catch"](0),e.prev=15,p=e.t0.toString().split('returnedHash="'),!(p.length>=1&&void 0!==p[1])){e.next=22;break}return console.log("txHash:"+p[1]),d=p[1].toString().split('",')[0],A?(U("sucess"),spendETH_JS.postMessage(d)):console.log("txHash:"+d),e.abrupt("return");case 22:J(e.t0),e.next=28;break;case 25:e.prev=25,e.t1=e["catch"](15),J(e.t1);case 28:case"end":return e.stop()}}),e,null,[[0,13],[15,25]])})));function n(n,t,a,r,c){return e.apply(this,arguments)}return n}(),spendCFXERC20:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o,s,f,i,u,l,p;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,c=new g["Conflux"]({url:M,networkId:1029}),o=c.wallet.addPrivateKey(n),s=c.Contract({abi:v,address:a}),e.next=6,s.decimals();case 6:return f=e.sent,i=g["Drip"].fromGDrip(1),u=S.utils.parseUnits(r,f),e.next=11,s.transfer(t,u).sendTransaction({from:o,gasPrice:i});case 11:return l=e.sent,e.next=14,c.getTransactionByHash(l);case 14:p=e.sent,console.log(l),console.log(p);case 17:if(null!=p.blockHash){e.next=24;break}return N(1e3),e.next=21,c.getTransactionByHash(l);case 21:p=e.sent,e.next=17;break;case 24:A?(U("sucess"),spendCFXERC20_JS.postMessage(l)):(console.log(p),console.log(l)),e.next=30;break;case 27:e.prev=27,e.t0=e["catch"](0),J(e.t0.data);case 30:case"end":return e.stop()}}),e,null,[[0,27]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),spendETHERC20:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c,o){var s,i,u,l,p,d,_,y,b,m;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,s=new S.providers.JsonRpcProvider(o),i=new S.Wallet(n,s),e.next=5,i.getTransactionCount();case 5:return u=e.sent,l=new S.Contract(a,v,s),e.next=9,l.decimals();case 9:return p=e.sent,d=S.utils.parseUnits(r,p),_=l.connect(i),e.next=14,_.transfer(t,d,{nonce:u,gasLimit:6e4,gasPrice:S.utils.parseEther(f["a"].toAe(c))});case 14:y=e.sent,A?(U("sucess"),spendETHERC20_JS.postMessage(y.hash)):console.log("tHash:"+y.hash),e.next=32;break;case 18:if(e.prev=18,e.t0=e["catch"](0),e.prev=20,b=e.t0.toString().split('returnedHash="'),!(b.length>=1&&void 0!==b[1])){e.next=26;break}return m=b[1].toString().split('",')[0],A?(U("sucess"),spendETHERC20_JS.postMessage(m)):console.log("txHash:"+m),e.abrupt("return");case 26:J(e.t0),e.next=32;break;case 29:e.prev=29,e.t1=e["catch"](20),J(e.t1);case 32:case"end":return e.stop()}}),e,null,[[0,18],[20,29]])})));function n(n,t,a,r,c,o){return e.apply(this,arguments)}return n}(),balanceETHERC20:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o,s,f,i;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,c=new S.providers.JsonRpcProvider(r),o=new S.Contract(t,v,c),e.next=5,o.decimals();case 5:return s=e.sent,e.next=8,o.balanceOf(n);case 8:f=e.sent,i=S.utils.formatEther(f),A?balanceETHERC20_JS.postMessage(f.toString()+"#"+s+"#"+t+"#"+n+"#"+a):console.log("token balance:"+i),e.next=16;break;case 13:e.prev=13,e.t0=e["catch"](0),J(e.t0);case 16:case"end":return e.stop()}}),e,null,[[0,13]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),balanceCFXERC20:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t){var a,r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,a=new g["Conflux"]({url:M,networkId:1029}),r=a.Contract({abi:v,address:t}),e.next=5,r.decimals();case 5:return c=e.sent,e.next=8,r.balanceOf(n);case 8:o=e.sent,A?balanceCFXERC20_JS.postMessage(o.toString()+"#"+c):console.log("balance:"+f["a"].toAe(o.toString())),e.next=15;break;case 12:e.prev=12,e.t0=e["catch"](0),J(e.t0.data);case 15:case"end":return e.stop()}}),e,null,[[0,12]])})));function n(n,t){return e.apply(this,arguments)}return n}(),balanceAEX9:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t){var a,r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,j("d03826de64d010f683b4aee0ac67e074e01725bb6f94c6d26942ab5a5671886a5e88d722246295cefec3143d2cf2212347aac960d0b3ea4abe03fba86ce0dc2e","ak_idkx6m3bgRr7WiKXuB8EBYBoRqVsaSc6qo4dsd23HKgj3qiCF");case 3:return a=e.sent,e.next=6,a.getContractInstance(y,{contractAddress:t});case 6:return r=e.sent,e.next=9,r.methods.balance(n);case 9:return c=e.sent,e.next=12,r.methods.meta_info();case 12:o=e.sent,A?balanceAEX9_JS.postMessage(c.decodedResult+"#"+o.decodedResult.decimals+"#"+t+"#"+n+"#AE"):(console.log("metaInfo:"+o.decodedResult.decimals),console.log("balance:"+c.decodedResult)),e.next=19;break;case 16:e.prev=16,e.t0=e["catch"](0),J(e.t0);case 19:case"end":return e.stop()}}),e,null,[[0,16]])})));function n(n,t){return e.apply(this,arguments)}return n}(),signTransactionCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c,o,s){var f,i,u,l;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,f=new g["Conflux"]({url:M,networkId:1029}),i=f.wallet.addPrivateKey(n),u=f.sendTransaction({from:i.address,to:o,gasPrice:r.toString(10),gas:a.toString(10),storageLimit:t.toString(10),value:c.toString(10),data:s}),console.log({from:i.address,to:o,gasPrice:r.toString(10),gas:a.toString(10),storageLimit:t.toString(10),value:c.toString(10),data:s}),e.next=7,u;case 7:l=e.sent,A?(U("sucess"),signTransactionCFX_JS.postMessage(l)):console.log(l),e.next=14;break;case 11:e.prev=11,e.t0=e["catch"](0),J(e.t0.data);case 14:case"end":return e.stop()}}),e,null,[[0,11]])})));function n(n,t,a,r,c,o,s){return e.apply(this,arguments)}return n}(),signTransactionETH:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c,o,s){var i,u,l,p,d,_,y;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,i=new S.providers.JsonRpcProvider(s),u=new S.Wallet(n,i),e.next=5,u.getTransactionCount();case 5:return l=e.sent,p={nonce:l,gasLimit:S.utils.parseEther(f["a"].toAe(t)),gasPrice:S.utils.parseEther(f["a"].toAe(a)),to:c,value:S.utils.parseEther(f["a"].toAe(r)),data:o},e.next=9,u.sendTransaction(p);case 9:if(d=e.sent,A){e.next=14;break}console.log("txHash:"+d.hash),e.next=17;break;case 14:return U("sucess"),signTransactionETH_JS.postMessage(d.hash),e.abrupt("return",d.hash);case 17:e.next=34;break;case 19:if(e.prev=19,e.t0=e["catch"](0),e.prev=21,_=e.t0.toString().split('returnedHash="'),!(_.length>=1&&void 0!==_[1])){e.next=28;break}return console.log("txHash:"+_[1]),y=_[1].toString().split('",')[0],A?(U("sucess"),signTransactionETH_JS.postMessage(y)):console.log("txHash:"+y),e.abrupt("return");case 28:J(e.t0),e.next=34;break;case 31:e.prev=31,e.t1=e["catch"](21),J(e.t1);case 34:case"end":return e.stop()}}),e,null,[[0,19],[21,31]])})));function n(n,t,a,r,c,o,s){return e.apply(this,arguments)}return n}(),signTypeTransactionETH:function(e){function n(n,t,a){return e.apply(this,arguments)}return n.toString=function(){return e.toString()},n}(function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,r=new S.providers.JsonRpcProvider(a),c=new S.Wallet(n,r),o=c.addPrivateKey(n),e.next=6,o.signMessage(h["a"].decode(t));case 6:s=e.sent,A?(U("sucess"),signTypeTransactionETH.postMessage(s.signature)):(console.log(t),console.log(s),console.log(s.signature)),e.next=13;break;case 10:e.prev=10,e.t0=e["catch"](0),J(e.t0);case 13:case"end":return e.stop()}}),e,null,[[0,10]])})));return function(n,t,a){return e.apply(this,arguments)}}()),signTypeTransactionCFX:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t){var a,r,c;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.prev=0,a=new g["Conflux"]({url:M,networkId:1029}),r=a.wallet.addPrivateKey(n),e.next=5,r.signMessage(h["a"].decode(t));case 5:c=e.sent,A?(U("sucess"),signTypeTransactionCFX_JS.postMessage(c.signature)):(console.log(t),console.log(c),console.log(c.signature)),e.next=12;break;case 9:e.prev=9,e.t0=e["catch"](0),J(e.t0.data);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})));function n(n,t){return e.apply(this,arguments)}return n}(),setNodeCompilerUrl:function(e,n){E=e,R=n},setCfxNodeUrl:function(e){M=e},getMnemonic:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(){var n,t;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:if(n=i["a"].generateMnemonic(),t=i["a"].getHdWalletAccountFromMnemonic(n,0),A){e.next=6;break}return e.abrupt("return",t.publicKey+"#"+t.secretKey+"#"+n);case 6:getMnemonic_JS.postMessage(t.publicKey+"#"+t.secretKey+"#"+n);case 7:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),getSecretKey:function(e){var n=i["a"].getHdWalletAccountFromMnemonic(e,0),t=n.publicKey,a=n.secretKey;if(!A)return t+"#"+a;getSecretKey_JS.postMessage(t+"#"+a)},validationMnemonic:function(e){try{return i["a"].generateSaveHDWallet(e,0),A?(validationMnemonic_JS.postMessage("sucess"),!0):!0}catch(n){return!!A&&(validationMnemonic_JS.postMessage("error"),n.message)}},spend:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c){var o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return o=e.sent,e.prev=3,U("broadcast"),e.next=7,o.spend(f["a"].toAettos(r),a,{payload:h["a"].decode(c),waitMined:!1});case 7:if(s=e.sent,A){e.next=10;break}return e.abrupt("return",s.hash);case 10:U("sucess"),spend_JS.postMessage(s.hash),e.next=17;break;case 14:e.prev=14,e.t0=e["catch"](3),J(e.t0);case 17:case"end":return e.stop()}}),e,null,[[3,14]])})));function n(n,t,a,r,c){return e.apply(this,arguments)}return n}(),updateName:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return c=e.sent,e.prev=3,U("aensUpdate"),o=[r],e.next=8,c.aensUpdate(a,o,{extendPointers:!0,waitMined:!0});case 8:if(s=e.sent,A){e.next=11;break}return e.abrupt("return",s.hash);case 11:U("sucess"),updateName_JS.postMessage(s.hash),e.next=19;break;case 15:e.prev=15,e.t0=e["catch"](3),console.log("Current Block Height:",e.t0.toString()),U("error");case 19:case"end":return e.stop()}}),e,null,[[3,15]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),bidName:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return c=e.sent,e.prev=3,U("aensBid"),e.next=7,c.aensBid(a,f["a"].toAettos(r),{waitMined:!1});case 7:if(o=e.sent,console.log("AE bid hash:"+o.hash),A){e.next=11;break}return e.abrupt("return",o.hash);case 11:U("sucess"),bidName_JS.postMessage(o.hash),e.next=18;break;case 15:e.prev=15,e.t0=e["catch"](3),J(e.t0);case 18:case"end":return e.stop()}}),e,null,[[3,15]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),claimName:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return r=e.sent,e.prev=3,U("aensPreclaim"),e.next=7,r.aensPreclaim(a);case 7:return c=e.sent,U("aensBid"),e.next=11,r.aensClaim(a,c.salt,{waitMined:!1});case 11:if(o=e.sent,console.log("AE bid hash:"+o.hash),A){e.next=15;break}return e.abrupt("return",o.hash);case 15:U("sucess"),claimName_JS.postMessage(o.hash),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a){return e.apply(this,arguments)}return n}(),transferName:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return c=e.sent,e.prev=3,U("aensTransfer"),e.next=7,c.aensTransfer(a,r,{waitMined:!0});case 7:if(o=e.sent,console.log("AE transfer hash:"+o.hash),A){e.next=11;break}return e.abrupt("return",o.hash);case 11:U("sucess"),transferName_JS.postMessage(o.hash),e.next=18;break;case 15:e.prev=15,e.t0=e["catch"](3),J(e.t0);case 18:case"end":return e.stop()}}),e,null,[[3,15]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),contractDefiV3Lock:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return c=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,c.contractEncodeCall(_,"mapping_lock",[f["a"].toAettos(r)]);case 7:return o=e.sent,U("contractCall"),e.next=11,c.contractCall(_,a,"mapping_lock",o);case 11:if(s=e.sent,console.log("AE transfer hash:"+s.hash),A){e.next=15;break}return e.abrupt("return",s.hash);case 15:U("sucess"),contractDefiV3Lock_JS.postMessage(s.hash),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),contractDefiV3UnLock:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return r=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,r.contractEncodeCall(_,"mapping_unlock");case 7:return c=e.sent,U("contractCall"),e.next=11,r.contractCall(_,a,"mapping_unlock",c);case 11:if(o=e.sent,console.log("AE transfer hash:"+o.hash),A){e.next=15;break}return e.abrupt("return",o.hash);case 15:U("sucess"),contractDefiV3UnLock_JS.postMessage(o.decodedResult),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a){return e.apply(this,arguments)}return n}(),contractDefiV3Benefits:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a){var r,c,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return r=e.sent,e.prev=3,U("contractEncodeCall"),U("contractCall"),e.next=8,r.getContractInstance(_,{contractAddress:a});case 8:return c=e.sent,e.next=11,c.methods.benefits();case 11:if(o=e.sent,console.log("AE transfer hash:"+JSON.stringify(o.decodedResult)),console.log("ok"),A){e.next=16;break}return e.abrupt("return",o.hash);case 16:U("sucess"),contractDefiV3Benefits_JS.postMessage(o.decodedResult),e.next=23;break;case 20:e.prev=20,e.t0=e["catch"](3),J(e.t0);case 23:case"end":return e.stop()}}),e,null,[[3,20]])})));function n(n,t,a){return e.apply(this,arguments)}return n}(),contractTransfer:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c){var o,s,i;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return o=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,o.contractEncodeCall(y,"transfer",[r,f["a"].toAettos(c)]);case 7:return s=e.sent,U("contractCall"),e.next=11,o.contractCall(y,a,"transfer",s);case 11:if(i=e.sent,console.log("AE transfer hash:"+i.hash),A){e.next=15;break}return e.abrupt("return",i.hash);case 15:U("sucess"),contractTransfer_JS.postMessage(i.hash),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a,r,c){return e.apply(this,arguments)}return n}(),contractSwapSell:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c,o,s){var i,u;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return i=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,i.getContractInstance(y,{contractAddress:r});case 7:if(u=e.sent,"None"===s){e.next=21;break}if(!(s>=f["a"].toAettos(c))){e.next=14;break}return e.next=12,X(i,r,c,o,a);case 12:e.next=19;break;case 14:return U("change_allowance"),e.next=17,u.methods.change_allowance(a.replace("ct_","ak_"),f["a"].toAettos(c));case 17:return e.next=19,X(i,r,c,o,a);case 19:e.next=26;break;case 21:return U("create_allowance"),e.next=24,u.methods.create_allowance(a.replace("ct_","ak_"),f["a"].toAettos(c));case 24:return e.next=26,X(i,r,c,o,a);case 26:e.next=31;break;case 28:e.prev=28,e.t0=e["catch"](3),J(e.t0);case 31:case"end":return e.stop()}}),e,null,[[3,28]])})));function n(n,t,a,r,c,o,s){return e.apply(this,arguments)}return n}(),contractSwapBuy:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c,o){var s,i,u;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return s=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,s.contractEncodeCall(b,"buy",[r,c]);case 7:return i=e.sent,U("contractCall"),e.next=11,s.contractCall(b,a,"buy",i,{amount:f["a"].toAettos(o)});case 11:if(u=e.sent,console.log("AE transfer hash:"+u.hash),A){e.next=15;break}return e.abrupt("return",u.hash);case 15:U("sucess"),contractSwapBuy_JS.postMessage(u.hash),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a,r,c,o){return e.apply(this,arguments)}return n}(),contractSwapCancel:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r){var c,o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,j(n,t);case 2:return c=e.sent,e.prev=3,U("contractEncodeCall"),e.next=7,c.contractEncodeCall(b,"cancel",[r]);case 7:return o=e.sent,U("contractCall"),e.next=11,c.contractCall(b,a,"cancel",o);case 11:if(s=e.sent,console.log("AE transfer hash:"+s.hash),A){e.next=15;break}return e.abrupt("return",s.hash);case 15:U("sucess"),contractSwapCancel_JS.postMessage(s.hash),e.next=22;break;case 19:e.prev=19,e.t0=e["catch"](3),J(e.t0);case 22:case"end":return e.stop()}}),e,null,[[3,19]])})));function n(n,t,a,r){return e.apply(this,arguments)}return n}(),sign:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t){return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:n&&O===t?a.accept():a.deny();case 1:case"end":return e.stop()}}),e)})));function n(n,t){return e.apply(this,arguments)}return n}(),initWallet:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,r){var c,o=this;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return this.url=r,c=Object(u["a"])({keypair:{secretKey:n,publicKey:t}}),e.t0=l["a"],e.t1=R,e.next=6,Object(p["a"])({url:E,internalUrl:I});case 6:e.t2=e.sent,e.t3={name:"local",instance:e.t2},e.t4=[e.t3],e.t5=[c],e.t6=function(e,n){n.accept()},e.t7=function(e,n){console.log("Disconnect client: ",n)},e.t8=function(e,n){n.accept()},e.t9=function(e,n){a=n,O=H(),onSign_JS.postMessage(O),onSignData_JS.postMessage(JSON.stringify(n.params.txObject.params))},e.t10=function(e,n){console.log(e),console.log(n),console.log("------------------------"),n.deny()},e.t11=function(e,n){console.log(e),console.log(n),console.log("------------------------"),n.deny()},e.t12={compilerUrl:e.t1,nodes:e.t4,name:"Box Wallet",accounts:e.t5,onConnection:e.t6,onDisconnect:e.t7,onSubscription:e.t8,onSign:e.t9,onAskAccounts:e.t10,onMessageSign:e.t11},(0,e.t0)(e.t12).then((function(e){console.log(m["a"]);var n=Object(m["a"])({target:o.$refs.iframe.contentWindow});e.addRpcClient(n),e.shareWalletInfo(n.sendMessage.bind(n));var t=setInterval((function(){return e.shareWalletInfo(n.sendMessage.bind(n))}),3e3),a=function(){e.showMenu=!1};window.addEventListener("blur",a),e.$once("hook:destroyed",(function(){window.removeEventListener("blur",a),clearInterval(t),e.getClients().clients.forEach((function(n){var t=n.id;return e.removeRpcClient(t)}))}))})).catch((function(e){console.log("err"),console.log(e)}));case 18:case"end":return e.stop()}}),e,this)})));function n(n,t,a){return e.apply(this,arguments)}return n}(),init:function(){var e=Object(s["a"])(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}};function H(){for(var e=[],n="0123456789abcdef",t=0;t<36;t++)e[t]=n.substr(Math.floor(16*Math.random()),1);e[14]="4",e[19]=n.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-";var a=e.join("");return a}function j(e,n){return B.apply(this,arguments)}function B(){return B=Object(s["a"])(regeneratorRuntime.mark((function e(n,t){var a,r;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return a=Object(u["a"])({keypair:{secretKey:n,publicKey:t}}),e.next=3,Object(p["a"])({url:E});case 3:return r=e.sent,e.next=6,Object(d["a"])({compilerUrl:R,nodes:[{name:"main-net",instance:r}],accounts:[a]});case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)}))),B.apply(this,arguments)}function X(e,n,t,a,r){return L.apply(this,arguments)}function L(){return L=Object(s["a"])(regeneratorRuntime.mark((function e(n,t,a,r,c){var o,s;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return U("contractEncodeCall"),e.next=3,n.contractEncodeCall(b,"sell",[t,f["a"].toAettos(a),f["a"].toAettos(r)]);case 3:return o=e.sent,U("contractCall"),e.next=7,n.contractCall(b,c,"sell",o);case 7:if(s=e.sent,U("sucess"),A){e.next=11;break}return e.abrupt("return",s.hash);case 11:contractSwapSell_JS.postMessage(s.hash);case 12:case"end":return e.stop()}}),e)}))),L.apply(this,arguments)}function U(e){A&&status_JS.postMessage(e)}function J(e){A?(console.log("ERROR:",e.toString()),status_JS.postMessage("error"),error_JS.postMessage(e.toString())):console.log("ERROR:",e.toString())}var W=F,P=(t("8df8"),t("2877")),K=Object(P["a"])(W,c,o,!1,null,null,null),D=K.exports;r["a"].config.productionTip=!1,new r["a"]({render:function(e){return e(D)}}).$mount("#app")},"58e1":function(e){e.exports=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"router","type":"address"}],"name":"NewRouter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"string","name":"tokenUri","type":"string"}],"name":"NewURI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"keyHash","type":"uint256"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_tokenURIs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantMinterRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeMinterRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"isApprovedOrOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"subTokenIdByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"subTokenIdCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolverByController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"resolverOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"router","type":"address"}],"name":"setRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"router","type":"address"}],"name":"setRouterByController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"routerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"keyHash","type":"uint256"}],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"label","type":"string"}],"name":"transferURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"label","type":"string"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"label","type":"string"},{"internalType":"string","name":"subLabel","type":"string"}],"name":"transferSubURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"label","type":"string"},{"internalType":"string","name":"subLabel","type":"string"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferSubURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"}],"name":"mintSubURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeMintSubURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"}],"name":"mintSubURIByController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeMintSubURIByController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"}],"name":"burnSubURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"}],"name":"burnSubURIByController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"label","type":"string"}],"name":"subTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')},6:function(e,n){},7:function(e,n){},8:function(e,n){},"8df8":function(e,n,t){"use strict";t("b403")},9:function(e,n){},b403:function(e,n,t){},c834:function(e){e.exports=JSON.parse('[{"inputs":[{"internalType":"contract Registry","name":"registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"string","name":"key","type":"string"}],"name":"NewKey","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"contentId","type":"uint256"}],"name":"ResetContentId","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"contentId","type":"uint256"}],"name":"ResetKeyId","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"string","name":"keyIndex","type":"string"},{"indexed":true,"internalType":"string","name":"valueIndex","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"Set","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"reset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"allKeys","outputs":[{"internalType":"string[]","name":"keys","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"allRecords","outputs":[{"internalType":"string[]","name":"keys","type":"string[]"},{"internalType":"string[]","name":"values","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"key","type":"string"}],"name":"get","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"}],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string[]","name":"keys","type":"string[]"},{"internalType":"string[]","name":"values","type":"string[]"}],"name":"setMulti","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string[]","name":"keys","type":"string[]"}],"name":"getMulti","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"}]')}});
//# sourceMappingURL=app.b3f86a1c.js.map