{"version":3,"file":"js/app.0a8fa007.js","mappings":"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","sources":["webpack://box-wallet-sdk/./src/App.vue","webpack://box-wallet-sdk/./src/components/ae.vue","webpack://box-wallet-sdk/./src/components/ae.vue?e79a","webpack://box-wallet-sdk/./src/components/cfx.vue","webpack://box-wallet-sdk/./src/components/cfx.vue?4f5d","webpack://box-wallet-sdk/./src/App.vue?7ccd","webpack://box-wallet-sdk/./src/main.js","webpack://box-wallet-sdk/webpack/bootstrap","webpack://box-wallet-sdk/webpack/runtime/chunk loaded","webpack://box-wallet-sdk/webpack/runtime/compat get default export","webpack://box-wallet-sdk/webpack/runtime/define property getters","webpack://box-wallet-sdk/webpack/runtime/global","webpack://box-wallet-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://box-wallet-sdk/webpack/runtime/make namespace object","webpack://box-wallet-sdk/webpack/runtime/node module decorator","webpack://box-wallet-sdk/webpack/runtime/jsonp chunk loading","webpack://box-wallet-sdk/webpack/startup"],"sourcesContent":["<template>\n\n  <AE/>\n  <CFX msg=\"B\"/>\n</template>\n\n<script>\nimport AE from './components/ae.vue'\nimport CFX from './components/cfx.vue'\n\n\nexport default {\n  name: 'App',\n  components: {\n    AE,CFX\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<template>\n    <div>\n        {{ msg }}\n        <br />\n        <textarea rows=\"10\" cols=\"100\" v-model=\"textData\"></textarea>\n        <br />\n        <button @click=\"channelCall(textData)\">TEST</button>\n        <br />\n        <textarea rows=\"1\" cols=\"100\" v-model=\"input\"></textarea>\n        <br />\n\n        <button @click=\"formatAmount(input)\">FORMAT</button>\n\n        <br />\n\n        <button @click=\"debug()\">DEBUG</button>\n\n        <br />\n        {{ formatData }}\n\n    </div>\n</template>\n\n<script>\nimport Aex9TokenContract from \"../contracts/Aex9TokenContract.json\";\nimport VegasMarketContract from \"../contracts/VegasMarketContract.json\";\nimport AensMarketContract from \"../contracts/AensMarketContract.json\";\nimport AedexV2RouterContract from \"../contracts/AedexV2RouterContract.json\";\nimport { ethers } from \"ethers\";\nimport {\n    AE_AMOUNT_FORMATS,\n    AeSdk,\n    DRY_RUN_ACCOUNT,\n    getAddressFromPriv,\n    getHdWalletAccountFromSeed,\n    MemoryAccount,\n    Node,\n    toAettos,\n} from \"@aeternity/aepp-sdk\";\n\n\nconst bip39 = require(\"bip39\");\nconst { Base64 } = require(\"js-base64\");\n\nlet node = new Node(\"https://mainnet.aeternity.io\");\n\nlet aeSdk = new AeSdk({\n    nodes: [{ name: \"main-net\", instance: node }],\n});\n\nexport default {\n    name: \"AE\",\n    data() {\n        return {\n            textData: \"\",\n            runningInFrame: window.parent !== window,\n            input: \"\",\n            formatData: \"\",\n            msg: \"Wait Data Test ...\",\n        };\n    },\n    async mounted() {\n        window[\"channelCall\"] = (json) => {\n            this.channelCall(json);\n        };\n    },\n    methods: {\n\n        debug: async function () {\n\n        },\n        formatAmount: async function (amount) {\n            this.formatData = ethers.utils.formatUnits(amount, 18);\n        },\n        channelCall: async function (json) {\n            const appData = JSON.parse(json);\n            console.log(appData);\n\n            this.msg = \"Wait data\";\n            if (appData.name === \"aeGetCurrentHeight\") {\n                await this.aeGetCurrentHeight();\n            }\n            if (appData.name == \"aeGenerateAccount\") {\n                this.aeGenerateAccount();\n            }\n            if (appData.name == \"aeSetNodeUrl\") {\n                this.aeSetNodeUrl(appData.params.url);\n            }\n            if (appData.name == \"aeBalance\") {\n                this.aeBalance(appData.params.address);\n            }\n            if (appData.name == \"aeRestoreAccountMnemonic\") {\n                this.aeRestoreAccountMnemonic(appData.params.mnemonic);\n            }\n            if (appData.name == \"aeRestoreAccountSecretKey\") {\n                this.aeRestoreAccountSecretKey(appData.params.secretKey);\n            }\n            if (appData.name == \"aeSpend\") {\n                this.aeSpend(\n                    appData.params.secretKey,\n                    appData.params.receiveAddress,\n                    appData.params.amount,\n                    appData.params.payload\n                );\n            }\n            if (appData.name == \"aeAensUpdate\") {\n                this.aeAensUpdate(appData.params.secretKey, appData.params.name, appData.params.address);\n            }\n            if (appData.name == \"aeAensClaim\") {\n                this.aeAensClaim(appData.params.secretKey, appData.params.name);\n            }\n            if (appData.name == \"aeAensTransfer\") {\n                this.aeAensTransfer(\n                    appData.params.secretKey,\n                    appData.params.name,\n                    appData.params.recipient\n                );\n            }\n            if (appData.name == \"aeAex9TokenBalance\") {\n                this.aeAex9TokenBalance(\n                    appData.params.address,\n                    appData.params.ctAddress\n                );\n            }\n            if (appData.name == \"aeAex9TokenTransfer\") {\n                this.aeAex9TokenTransfer(\n                    appData.params.secretKey,\n                    appData.params.toAddress,\n                    appData.params.amount,\n                    appData.params.ctAddress\n                );\n            }\n            if (appData.name == \"aeAex9TokenAllowance\") {\n                this.aeAex9TokenAllowance(\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.forAddress\n                );\n            }\n            if (appData.name == \"aeAex9TokenCreateAllowance\") {\n                this.aeAex9TokenCreateAllowance(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.forAddress,\n                    appData.params.amount\n                );\n            }\n            if (appData.name == \"aeVegasgetAggregatorUser\") {\n                this.aeVegasgetAggregatorUser(appData.params.ctAddress);\n            }\n            if (appData.name == \"aeVegasAddMarket\") {\n                this.aeVegasAddMarket(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.content,\n                    appData.params.sourceUrl,\n                    appData.params.minAmount,\n                    appData.params.overHeight,\n                    appData.params.results\n                );\n            }\n\n            if (appData.name == \"aeVegasUpdateConfig\") {\n                this.aeVegasUpdateConfig(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.config\n                );\n            }\n            if (appData.name == \"aeVegasMarketDetail\") {\n                this.aeVegasMarketDetail(\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.owner,\n                    appData.params.marketId\n                );\n            }\n            if (appData.name == \"aeVegasMarketStart\") {\n                this.aeVegasMarketStart(\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.isSelf\n                );\n            }\n            if (appData.name == \"aeVegasMarkeReferee\") {\n                this.aeVegasMarkeReferee(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n            if (appData.name == \"aeVegasMarketRecords\") {\n                this.aeVegasMarketRecords(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n            if (appData.name == \"aeVegasSubmitAnswer\") {\n                this.aeVegasSubmitAnswer(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.owner,\n                    appData.params.marketId,\n                    appData.params.selectIndex,\n                    appData.params.amount\n                );\n            }\n            if (appData.name == \"aeVegasProvideAnswer\") {\n                this.aeVegasProvideAnswer(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.owner,\n                    appData.params.marketId,\n                    appData.params.selectIndex,\n                    appData.params.marketType\n                );\n            }\n            if (appData.name == \"aeVegasStopMarket\") {\n                this.aeVegasStopMarket(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.owner,\n                    appData.params.marketId\n                );\n            }\n            if (appData.name == \"aeVegasReceiveReward\") {\n                this.aeVegasReceiveReward(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.owner,\n                    appData.params.marketId\n                );\n            }\n            if (appData.name == \"aeAensMarketPutName\") {\n                this.aeAensMarketPutName(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.name,\n                    appData.params.amount,\n                    appData.params.height\n                );\n            }\n            if (appData.name == \"aeAensMarketGetNameMaxPrice\") {\n                this.aeAensMarketGetNameMaxPrice(\n                    appData.params.ctAddress,\n                    appData.params.name\n                );\n            }\n            if (appData.name == \"aeAensMarketIsCallerExists\") {\n                this.aeAensMarketIsCallerExists(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n            if (appData.name == \"aeAensMarketRevokedName\") {\n                this.aeAensMarketRevokedName(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.name\n                );\n            }\n            if (appData.name == \"aeAensMarketRaiseName\") {\n                this.aeAensMarketRaiseName(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.name,\n                    appData.params.amount\n                );\n            }\n            if (appData.name == \"aeAensMarketAddTradableAddress\") {\n                this.aeAensMarketAddTradableAddress(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.name\n                );\n            }\n            if (appData.name == \"aeAensMarketIsTradableAddress\") {\n                this.aeAensMarketIsTradableAddress(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n            if (appData.name == \"aeAensMarketDealName\") {\n                this.aeAensMarketDealName(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.name\n                );\n            }\n\n            if (appData.name == \"aeAensMarketGetNameOrder\") {\n                this.aeAensMarketGetNameOrder(\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.name\n                );\n            }\n            if (appData.name == \"aeAensMarketGetNameNextRaisePrice\") {\n                this.aeAensMarketGetNameNextRaisePrice(\n                    appData.params.ctAddress,\n                    appData.params.address,\n                    appData.params.leftAmount\n                );\n            }\n            if (appData.name == \"aeAensMarketGetNamesOrder\") {\n                this.aeAensMarketGetNamesOrder(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n            if (appData.name == \"aeAensMarketGetNameRecords\") {\n                this.aeAensMarketGetNameRecords(\n                    appData.params.ctAddress,\n                    appData.params.address\n                );\n            }\n\n            if (appData.name == \"aeDexSwapExactAeForTokens\") {\n                this.aeDexSwapExactAeForTokens(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.amountAe,\n                    appData.params.amountOutTokenMin,\n                    appData.params.path,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n            if (appData.name == \"aeDexSwapExactTokensForAe\") {\n                this.aeDexSwapExactTokensForAe(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.amountToken,\n                    appData.params.amountOutAeMin,\n                    appData.params.path,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n            if (appData.name == \"aeDexSwapExactTokensForTokens\") {\n                this.aeDexSwapExactTokensForTokens(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.amountTokenIn,\n                    appData.params.amountOutTokenMin,\n                    appData.params.path,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n            if (appData.name == \"aeDexAddLiquidityAe\") {\n                this.aeDexAddLiquidityAe(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.token,\n                    appData.params.amountTokenDesired,\n                    appData.params.amountTokenMin,\n                    appData.params.amountAeMin,\n                    appData.params.amountAe,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n            if (appData.name == \"aeDexRemoveLiquidityAe\") {\n                this.aeDexRemoveLiquidityAe(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.token,\n                    appData.params.liquidity,\n                    appData.params.amountTokenMin,\n                    appData.params.amountAeMin,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n\n            if (appData.name == \"aeDexAddLiquidity\") {\n                this.aeDexAddLiquidity(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.tokenA,\n                    appData.params.tokenB,\n                    appData.params.amountTokenDesiredA,\n                    appData.params.amountTokenDesiredB,\n                    appData.params.amountTokenMinA,\n                    appData.params.amountTokenMinB,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n\n            if (appData.name == \"aeDexRemoveLiquidity\") {\n                this.aeDexRemoveLiquidity(\n                    appData.params.secretKey,\n                    appData.params.ctAddress,\n                    appData.params.tokenA,\n                    appData.params.tokenB,\n                    appData.params.liquidity,\n                    appData.params.amountTokenMinA,\n                    appData.params.amountTokenMinB,\n                    appData.params.to,\n                    appData.params.deadline\n                );\n            }\n        },\n\n        initAeSdk: async function () {\n            // const height = await aeSdk.height();\n            // this.msg = \"Current Block: \" + height;\n        },\n        aeAensMarketPutName: async function (\n            secretKey,\n            ctAddress,\n            name,\n            amount,\n            overHeight\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let delegationSignature = await aeSdk.createAensDelegationSignature(\n                    ctAddress,\n                    { name }\n                );\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: maxPrice } =\n                    await aensMarketContract.methods.get_name_max_price(name);\n                let payAmount = 0;\n                if (toAettos(amount) > maxPrice) {\n                    payAmount = Number(amount) / 100;\n                }\n\n                const { decodedEvents } = await aensMarketContract.methods.put_name(\n                    name,\n                    delegationSignature,\n                    toAettos(amount),\n                    Number(overHeight),\n                    { amount: toAettos(payAmount) }\n                );\n                console.log(amount);\n                console.log(overHeight);\n                await this.responseSuccess(\"aeAensMarketPutName\", {\n                    decodedEvents: decodedEvents,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketPutName\", e.message);\n            }\n        },\n\n        aeDexSwapExactAeForTokens: async function (\n            secretKey,\n            ctAddress,\n            amountAe,\n            amountOutTokenMin,\n            path,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n                let swapResult =\n                    await aensMarketContract.methods.swap_exact_ae_for_tokens(\n                        toAettos(amountOutTokenMin),\n                        path,\n                        to,\n                        deadline,\n                        undefined,\n                        {\n                            gas: 150000,\n                            omitUnknown: true,\n                            amount: toAettos(amountAe),\n                        }\n                    );\n\n                this.responseSuccess(\"aeDexSwapExactAeForTokens\", {\n                    result: swapResult,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexSwapExactAeForTokens\", e.message);\n            }\n        },\n        aeDexSwapExactTokensForAe: async function (\n            secretKey,\n            ctAddress,\n            amountToken,\n            amountOutAeMin,\n            path,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n                let swapResult =\n                    await aensMarketContract.methods.swap_exact_tokens_for_ae(\n                        toAettos(amountToken),\n                        toAettos(amountOutAeMin),\n                        path,\n                        to,\n                        deadline,\n                        undefined,\n                        {\n                            gas: 150000,\n                            omitUnknown: true,\n                        }\n                    );\n\n                this.responseSuccess(\"aeDexSwapExactTokensForAe\", {\n                    result: swapResult,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexSwapExactTokensForAe\", e.message);\n            }\n        },\n        aeDexSwapExactTokensForTokens: async function (\n            secretKey,\n            ctAddress,\n            amountTokenIn,\n            amountOutTokenMin,\n            path,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n                let swapResult =\n                    await aensMarketContract.methods.swap_exact_tokens_for_tokens(\n                        toAettos(amountTokenIn),\n                        toAettos(amountOutTokenMin),\n                        path,\n                        to,\n                        deadline,\n                        undefined,\n                        {\n                            gas: 150000,\n                            omitUnknown: true,\n                        }\n                    );\n\n                this.responseSuccess(\"aeDexSwapExactTokensForTokens\", {\n                    result: swapResult\n                });\n            } catch (e) {\n                this.responseError(\"aeDexSwapExactTokensForTokens\", e.message);\n            }\n        },\n\n        aeDexAddLiquidityAe: async function (\n            secretKey,\n            ctAddress,\n            token,\n            amountTokenDesired,\n            amountTokenMin,\n            amountAeMin,\n            amountAe,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n                console.log(toAettos(amountAe));\n                let swapResult = await aensMarketContract.methods.add_liquidity_ae(\n                    token,\n                    toAettos(amountTokenDesired),\n                    toAettos(amountTokenMin),\n                    toAettos(amountAeMin),\n                    to,\n                    1000n,\n                    deadline,\n                    {\n                        gas: 150000,\n                        omitUnknown: true,\n                        amount: toAettos(amountAe),\n                    }\n                );\n\n                this.responseSuccess(\"aeDexAddLiquidityAe\", {\n                    swapResult: await swapResult.decodedResult,\n                    hash: swapResult.hash,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexAddLiquidityAe\", e.message);\n            }\n        },\n\n        aeDexAddLiquidity: async function (\n            secretKey,\n            ctAddress,\n            tokenA,\n            tokenB,\n            amountTokenDesiredA,\n            amountTokenDesiredB,\n            amountTokenMinA,\n            amountTokenMinB,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n\n                let swapResult = await aensMarketContract.methods.add_liquidity(\n                    tokenA,\n                    tokenB,\n                    toAettos(amountTokenDesiredA),\n                    toAettos(amountTokenDesiredB),\n                    toAettos(amountTokenMinA),\n                    toAettos(amountTokenMinB),\n                    to,\n                    1000n,\n                    deadline,\n                    {\n                        gas: 150000,\n                        omitUnknown: true,\n                    }\n                );\n\n                this.responseSuccess(\"aeDexAddLiquidity\", {\n                    swapResult: await swapResult.decodedResult,\n                    hash: swapResult.hash,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexAddLiquidity\", e.message);\n            }\n        },\n        aeDexRemoveLiquidityAe: async function (\n            secretKey,\n            ctAddress,\n            token,\n            liquidity,\n            amountTokenMin,\n            amountAeMin,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n\n                let swapResult = await aensMarketContract.methods.remove_liquidity_ae(\n                    token,\n                    toAettos(liquidity),\n                    toAettos(amountTokenMin),\n                    toAettos(amountAeMin),\n                    to,\n                    deadline,\n                    {\n                        gas: 150000,\n                        omitUnknown: true,\n                    }\n                );\n\n                this.responseSuccess(\"aeDexAddLiquidityAe\", {\n                    swapResult: await swapResult.decodedResult,\n                    hash: swapResult.hash,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexAddLiquidityAe\", e.message);\n            }\n        },\n        aeDexRemoveLiquidity: async function (\n            secretKey,\n            ctAddress,\n            tokenA,\n            tokenB,\n            liquidity,\n            amountTokenMinA,\n            amountTokenMinB,\n            to,\n            deadline\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AedexV2RouterContract,\n                    contractAddress: ctAddress,\n                });\n\n                let swapResult = await aensMarketContract.methods.remove_liquidity(\n                    tokenA,\n                    tokenB,\n                    toAettos(liquidity),\n                    toAettos(amountTokenMinA),\n                    toAettos(amountTokenMinB),\n                    to,\n                    deadline,\n                    {\n                        gas: 150000,\n                        omitUnknown: true,\n                    }\n                );\n\n                this.responseSuccess(\"aeDexRemoveLiquidity\", {\n                    swapResult: await swapResult.decodedResult,\n                    hash: swapResult.hash,\n                });\n            } catch (e) {\n                this.responseError(\"aeDexRemoveLiquidity\", e.message);\n            }\n        },\n        aeAensMarketGetNameMaxPrice: async function (ctAddress, name) {\n            try {\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                let { decodedResult: amount } =\n                    await aensMarketContract.methods.get_name_max_price(name);\n                amount = ethers.utils.formatUnits(amount, 18);\n                this.responseSuccess(\"aeAensMarketGetNameMaxPrice\", {\n                    amount: amount,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketGetNameMaxPrice\", e.message);\n            }\n        },\n        aeAensMarketIsCallerExists: async function (ctAddress, address) {\n            try {\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                DRY_RUN_ACCOUNT.pub = address;\n                let { decodedResult: maxPrice } =\n                    await aensMarketContract.methods.is_caller_exists();\n                this.responseSuccess(\"aeAensMarketIsCallerExists\", {\n                    maxPrice: maxPrice,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketIsCallerExists\", e.message);\n            }\n        },\n        aeAensMarketRevokedName: async function (secretKey, ctAddress, name) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedEvents } = await aensMarketContract.methods.revoked_name(\n                    name\n                );\n\n                this.responseSuccess(\"aeAensMarketRevokedName\", {\n                    decodedEvents: decodedEvents,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketRevokedName\", e.message);\n            }\n        },\n        aeAensMarketRaiseName: async function (secretKey, ctAddress, name, amount) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedEvents } = await aensMarketContract.methods.raise_name(\n                    name,\n                    { amount: toAettos(amount) }\n                );\n\n                this.responseSuccess(\"aeAensMarketRaiseName\", {\n                    decodedEvents: decodedEvents,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketRaiseName\", e.message);\n            }\n        },\n\n        aeAensMarketDealName: async function (secretKey, ctAddress, name) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedEvents } = await aensMarketContract.methods.deal_name(\n                    name\n                );\n\n                this.responseSuccess(\"aeAensMarketDealName\", {\n                    decodedEvents: decodedEvents,\n                });\n            } catch (e) {\n                this.responseError(\"aeAensMarketDealName\", e.message);\n            }\n        },\n\n        aeAensMarketAddTradableAddress: async function (\n            secretKey,\n            ctAddress,\n            address,\n            name\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: result } =\n                    await aensMarketContract.methods.add_tradable_address(address, name);\n\n                this.responseSuccess(\"aeAensMarketAddTradableAddress\", result);\n            } catch (e) {\n                this.responseError(\"aeAensMarketAddTradableAddress\", e.message);\n            }\n        },\n\n        aeAensMarketIsTradableAddress: async function (ctAddress, address) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: result } =\n                    await aensMarketContract.methods.is_tradable_address(address);\n                this.responseSuccess(\"aeAensMarketIsTradableAddress\", { name: result });\n            } catch (e) {\n                this.responseError(\"aeAensMarketIsTradableAddress\", e.message);\n            }\n        },\n\n\n        aeAensMarketGetNameNextRaisePrice: async function (\n            ctAddress,\n            address,\n            leftAmount\n        ) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: nextNameRaisePrice } =\n                    await aensMarketContract.methods.get_name_next_raise_price(\n                        leftAmount\n                    );\n                nextNameRaisePrice = ethers.utils.formatUnits(nextNameRaisePrice, 18);\n                nextNameRaisePrice = parseInt(nextNameRaisePrice) + 1;\n                this.responseSuccess(\n                    \"aeAensMarketGetNameNextRaisePrice\",\n                    nextNameRaisePrice\n                );\n            } catch (e) {\n                this.responseError(\"aeAensMarketGetNameNextRaisePrice\", e.message);\n            }\n        },\n        aeAensMarketGetNamesOrder: async function (ctAddress, address) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: nameOrders } =\n                    await aensMarketContract.methods.get_names_order();\n                console.log(nameOrders);\n                this.responseSuccess(\"aeAensMarketGetNamesOrder\", this.mapToArray(nameOrders));\n            } catch (e) {\n                this.responseError(\"aeAensMarketGetNamesOrder\", e.message);\n            }\n        },\n        aeAensMarketGetNameOrder: async function (ctAddress, address, name) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: nameOrder } =\n                    await aensMarketContract.methods.get_name_order(name);\n\n                this.responseSuccess(\"aeAensMarketGetNameOrder\", nameOrder);\n            } catch (e) {\n                this.responseError(\"aeAensMarketGetNameOrder\", e.message);\n            }\n        },\n\n        aeAensMarketGetNameRecords: async function (ctAddress, address) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                let aensMarketContract = await aeSdk.getContractInstance({\n                    aci: AensMarketContract,\n                    contractAddress: ctAddress,\n                });\n                let { decodedResult: records } =\n                    await aensMarketContract.methods.get_name_records(address);\n                this.responseSuccess(\"aeAensMarketGetNameRecords\", records);\n            } catch (e) {\n                this.responseError(\"aeAensMarketGetNameRecords\", e.message);\n            }\n        },\n\n        aeGetCurrentHeight: async function () {\n            try {\n                const height = await aeSdk.height();\n                this.responseSuccess(\"aeGetCurrentHeight\", { height: height });\n            } catch (e) {\n                this.responseError(\"aeGetCurrentHeight\", e.message);\n            }\n        },\n        aeSetNodeUrl: async function (url) {\n            try {\n                node = new Node(url);\n                aeSdk = new AeSdk({\n                    nodes: [{ name: \"main-net\", instance: node }],\n                });\n                this.responseSuccess(\"aeSetNodeUrl\");\n            } catch (e) {\n                this.responseError(\"aeSetNodeUrl\", e.message);\n            }\n        },\n\n        aeGenerateAccount: async function () {\n            let mnemonic = bip39.generateMnemonic();\n\n            const seed = await bip39.mnemonicToSeed(mnemonic);\n            const wallet = getHdWalletAccountFromSeed(seed, 0);\n            this.responseSuccess(\"aeGenerateAccount\", {\n                mnemonic: mnemonic,\n                publicKey: wallet.publicKey,\n                secretKey: wallet.secretKey,\n            });\n        },\n\n        aeRestoreAccountMnemonic: async function (mnemonic) {\n            if (!bip39.validateMnemonic(mnemonic)) {\n                this.responseError(\n                    \"aeRestoreAccountMnemonic\",\n                    \"mnemonic validate error\"\n                );\n                return;\n            }\n\n            const seed = await bip39.mnemonicToSeed(mnemonic);\n            const wallet = getHdWalletAccountFromSeed(seed, 0);\n            this.responseSuccess(\"aeRestoreAccountMnemonic\", {\n                mnemonic: mnemonic,\n                publicKey: wallet.publicKey,\n                secretKey: wallet.secretKey,\n            });\n        },\n\n        aeRestoreAccountSecretKey: async function (secretKey) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                this.responseSuccess(\"aeRestoreAccountSecretKey\", {\n                    publicKey: publicKey,\n                    secretKey: secretKey,\n                });\n            } catch (e) {\n                this.responseError(\"aeRestoreAccountSecretKey\", e.message);\n            }\n        },\n\n        aeBalance: async function (address) {\n            try {\n                let balance = await aeSdk.getBalance(address);\n                balance = ethers.utils.formatUnits(balance, 18);\n                this.responseSuccess(\"aeBalance\", { balance: balance });\n            } catch (e) {\n                this.responseError(\"aeBalance\", e.message);\n            }\n        },\n\n        aeSpend: async function (secretKey, receiveAddress, amount, payload) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let spendTxResult = await aeSdk.spend(amount, receiveAddress, {\n                    denomination: AE_AMOUNT_FORMATS.AE,\n                    payload: Base64.decode(payload),\n                });\n                this.responseSuccess(\"aeSpend\", { hash: spendTxResult.hash });\n            } catch (e) {\n                this.responseError(\"aeSpend\", e.message);\n            }\n        },\n\n        aeAensUpdate: async function (secretKey, name, address) {\n            try {\n                let nameInfo = await aeSdk.api.getNameEntryByName(name);\n                if (nameInfo == null) {\n                    this.responseError(\"aeAensUpdate\", \"name is not exist\");\n                    return;\n                }\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                const pointers = {\n                    account_pubkey: address,\n                };\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let spendTxResult = await aeSdk.aensUpdate(name, pointers, {});\n                this.responseSuccess(\"aeAensUpdate\", { hash: spendTxResult.hash });\n            } catch (e) {\n                this.responseError(\"aeAensUpdate\", e.message);\n            }\n        },\n\n        aeAensClaim: async function (secretKey, name) {\n            let publicKey;\n            try {\n                if (!(await this.getNameInfo(name))) {\n                    this.responseError(\"aeAensClaim\", \"Name is registered\");\n                    return;\n                }\n                publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                const preClaimTx = await aeSdk.aensPreclaim(name);\n                const claimTx = await aeSdk.aensClaim(name, preClaimTx.salt, {\n                    verify: true,\n                    waitMined: false,\n                });\n\n                this.responseSuccess(\"aeAensClaim\", { hash: claimTx.hash });\n            } catch (e) {\n                this.responseError(\"aeAensClaim\", e.message);\n            }\n        },\n\n        getNameInfo: async function (name) {\n            try {\n                await aeSdk.api.getNameEntryByName(name);\n                return false;\n            } catch (e) {\n                return true;\n            }\n        },\n\n        aeAensTransfer: async function (secretKey, name, recipient) {\n            try {\n                let nameInfo = await aeSdk.api.getNameEntryByName(name);\n                if (nameInfo == null) {\n                    this.responseError(\"aeAensTransfer\", \"name is not exist\");\n                    return;\n                }\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let spendTxResult = await aeSdk.aensTransfer(name, recipient);\n                this.responseSuccess(\"aeAensTransfer\", { hash: spendTxResult.hash });\n            } catch (e) {\n                this.responseError(\"aeAensTransfer\", e.message);\n            }\n        },\n\n\n        aeAex9TokenBalance: async function (address, ctAddress) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                console.log(address);\n                console.log(ctAddress);\n\n                let aex9Contract = await aeSdk.getContractInstance({\n                    aci: Aex9TokenContract,\n                    contractAddress: ctAddress,\n                });\n\n                let { decodedResult: metaInfoResult } =\n                    await aex9Contract.methods.meta_info();\n                console.log(metaInfoResult);\n\n                let { decodedResult: balanceResult } =\n                    await aex9Contract.methods.balance(address);\n                console.log(balanceResult);\n\n                if (balanceResult == undefined) {\n                    this.responseSuccess(\"aeAex9TokenBalance\", {\n                        address: address,\n                        ctAddress: ctAddress,\n                        decimals: metaInfoResult.decimals,\n                        balance: \"0.0\",\n                    });\n                    return;\n                }\n\n                let balance = ethers.utils.formatUnits(\n                    balanceResult,\n                    metaInfoResult.decimals\n                );\n\n                this.responseSuccess(\"aeAex9TokenBalance\", {\n                    address: address,\n                    ctAddress: ctAddress,\n                    decimals: metaInfoResult.decimals,\n                    balance: balance,\n                });\n            } catch (e) {\n                this.responseError(\"aeAex9TokenBalance\", e.message);\n            }\n        },\n        aeAex9TokenTransfer: async function (\n            secretKey,\n            toAddress,\n            amount,\n            ctAddress\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aex9Contract = await aeSdk.getContractInstance({\n                    aci: Aex9TokenContract,\n                    contractAddress: ctAddress,\n                });\n\n                let balanceTx = await aex9Contract.methods.transfer(\n                    toAddress,\n                    toAettos(amount)\n                );\n\n                this.responseSuccess(\"aeAex9TokenTransfer\", {\n                    publicKey: publicKey,\n                    ctAddress: ctAddress,\n                    hash: balanceTx.hash,\n                });\n            } catch (e) {\n                this.responseError(\"aeAex9TokenTransfer\", e.message);\n            }\n        },\n        aeAex9TokenCreateAllowance: async function (\n            secretKey,\n            ctAddress,\n            forAddress,\n            amount\n        ) {\n            try {\n                forAddress = forAddress.toString().replace(\"ct_\", \"ak_\");\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let aex9Contract = await aeSdk.getContractInstance({\n                    aci: Aex9TokenContract,\n                    contractAddress: ctAddress,\n                });\n\n                let tx = await aex9Contract.methods.create_allowance(\n                    forAddress,\n                    toAettos(amount)\n                );\n\n                this.responseSuccess(\"aeAex9TokenCreateAllowance\", {\n                    hash: tx.hash,\n                });\n            } catch (e) {\n                if (e.message.toString().includes(\"ALLOWANCE_ALREADY_EXISTENT\")) {\n                    console.log(\"ALLOWANCE_ALREADY_EXISTENT\");\n                    try {\n                        forAddress = forAddress.toString().replace(\"ct_\", \"ak_\");\n                        const publicKey = getAddressFromPriv(secretKey);\n                        const senderAccount = new MemoryAccount({\n                            keypair: { secretKey: secretKey, publicKey: publicKey },\n                        });\n                        await aeSdk.addAccount(senderAccount, { select: true });\n                        let aex9Contract = await aeSdk.getContractInstance({\n                            aci: Aex9TokenContract,\n                            contractAddress: ctAddress,\n                        });\n\n                        let tx = await aex9Contract.methods.change_allowance(\n                            forAddress,\n                            toAettos(amount)\n                        );\n\n                        this.responseSuccess(\"aeAex9TokenCreateAllowance\", {\n                            hash: tx.hash,\n                        });\n                    } catch (e) {\n                        this.responseError(\"aeAex9TokenCreateAllowance\", e.message);\n                    }\n                } else {\n                    this.responseError(\"aeAex9TokenCreateAllowance\", e.message);\n                }\n            }\n        },\n        aeAex9TokenAllowance: async function (ctAddress, address, forAddress) {\n            try {\n                DRY_RUN_ACCOUNT.pub = address;\n                forAddress = forAddress.toString().replace(\"ct_\", \"ak_\");\n                let aex9Contract = await aeSdk.getContractInstance({\n                    aci: Aex9TokenContract,\n                    contractAddress: ctAddress,\n                });\n\n                let { decodedResult: metaInfo } =\n                    await aex9Contract.methods.meta_info();\n                console.log(metaInfo);\n                let { decodedResult: currentAllowance } =\n                    await aex9Contract.methods.allowance({\n                        from_account: address,\n                        for_account: forAddress,\n                    });\n                console.log(currentAllowance);\n                if (currentAllowance == undefined) {\n                    currentAllowance = 0;\n                }\n                this.responseSuccess(\"aeAex9TokenAllowance\", {\n                    currentAllowance: ethers.utils.formatUnits(\n                        currentAllowance,\n                        metaInfo.decimals\n                    ),\n                });\n            } catch (e) {\n                this.responseError(\"aeAex9TokenAllowance\", e.message);\n            }\n        },\n\n        aeVegasgetAggregatorUser: async function (ctAddress) {\n            try {\n                //         let testContractSource = `\n\n                // `;\n\n                //         let testContractAci = await aeSdk.compilerApi.generateACI({\n                //           code: testContractSource,\n                //           options: {},\n                //         });\n\n                //         console.log(JSON.stringify(testContractAci));\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                let getAggregatorUserTx =\n                    await vegasContract.methods.get_aggregator_user();\n\n                let getAggregatorUser = await getAggregatorUserTx.decodedResult;\n\n                this.responseSuccess(\n                    \"aeVegasgetAggregatorUser\",\n                    this.mapToArray(getAggregatorUser)\n                );\n            } catch (e) {\n                this.responseError(\"aeVegasgetAggregatorUser\", e.message);\n            }\n        },\n\n        aeVegasUpdateConfig: async function (\n            secretKey,\n            ctAddress,\n            config\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                const addMarketTx = await vegasContract.methods.update_config(config);\n                let addMarket = addMarketTx.decodedResult;\n\n                this.responseSuccess(\"aeVegasUpdateConfig\", addMarket);\n            } catch (e) {\n                this.responseError(\"aeVegasUpdateConfig\", e.message);\n            }\n        },\n        aeVegasAddMarket: async function (\n            secretKey,\n            ctAddress,\n            content,\n            sourceUrl,\n            minAmount,\n            overHeight,\n            results\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                const addMarketTx = await vegasContract.methods.add_market(\n                    content,\n                    sourceUrl,\n                    toAettos(minAmount),\n                    Number(overHeight),\n                    results\n                );\n                let addMarket = addMarketTx.decodedResult;\n\n                this.responseSuccess(\"aeVegasAddMarket\", addMarket);\n            } catch (e) {\n                this.responseError(\"aeVegasAddMarket\", e.message);\n            }\n        },\n\n        aeVegasSubmitAnswer: async function (\n            secretKey,\n            ctAddress,\n            owner,\n            marketId,\n            selectIndex,\n            amount\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                const addMarketTx = await vegasContract.methods.submit_answer(\n                    owner,\n                    marketId,\n                    selectIndex,\n                    { amount: amount.toString() }\n                );\n                let addMarket = addMarketTx.decodedResult;\n\n                this.responseSuccess(\"aeVegasSubmitAnswer\", addMarket);\n            } catch (e) {\n                this.responseError(\"aeVegasSubmitAnswer\", e.message);\n            }\n        },\n\n        aeVegasProvideAnswer: async function (\n            secretKey,\n            ctAddress,\n            owner,\n            marketId,\n            selectIndex,\n            marketType\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                let provideAnswerTx;\n                if (marketType == 0) {\n                    provideAnswerTx =\n                        await vegasContract.methods.private_update_market_progress_to_over(\n                            owner,\n                            marketId,\n                            selectIndex\n                        );\n                } else {\n                    provideAnswerTx = await vegasContract.methods.provide_answer(\n                        owner,\n                        marketId,\n                        selectIndex\n                    );\n                }\n\n                let provideAnswer = provideAnswerTx.decodedResult;\n\n                this.responseSuccess(\"aeVegasProvideAnswer\", provideAnswer);\n            } catch (e) {\n                this.responseError(\"aeVegasProvideAnswer\", e.message);\n            }\n        },\n\n        aeVegasStopMarket: async function (\n            secretKey,\n            ctAddress,\n            owner,\n            marketId\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                const stopMarketTx = await vegasContract.methods.stop_market(\n                    owner,\n                    marketId\n                );\n                let stopMarket = stopMarketTx.decodedResult;\n                this.responseSuccess(\"aeVegasStopMarket\", stopMarket);\n            } catch (e) {\n                this.responseError(\"aeVegasStopMarket\", e.message);\n            }\n        },\n\n        aeVegasReceiveReward: async function (\n            secretKey,\n            ctAddress,\n            owner,\n            marketId\n        ) {\n            try {\n                const publicKey = getAddressFromPriv(secretKey);\n                const senderAccount = new MemoryAccount({\n                    keypair: { secretKey: secretKey, publicKey: publicKey },\n                });\n                await aeSdk.addAccount(senderAccount, { select: true });\n\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                const receiveRewardTx = await vegasContract.methods.receive_reward(\n                    owner,\n                    marketId\n                    // {\n                    //   gasPrice: 1000000000,\n                    //   gas: 60000,\n                    // }\n                );\n\n                let receiveReward = receiveRewardTx.decodedResult;\n\n                this.responseSuccess(\"aeVegasReceiveReward\", receiveReward);\n            } catch (e) {\n                this.responseError(\"aeVegasReceiveReward\", e.message);\n            }\n        },\n\n        aeVegasMarketStart: async function (ctAddress, address, isSelf) {\n            try {\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                DRY_RUN_ACCOUNT.pub = address;\n                const { decodedResult: marketStart } =\n                    await vegasContract.methods.get_markets_start(address, isSelf);\n                // console.log(marketStart);\n\n                console.log(this.mapToArray(marketStart));\n                this.responseSuccess(\"aeVegasMarketStart\", this.mapToArray(marketStart));\n            } catch (e) {\n                this.responseError(\"aeVegasMarketStart\", e.message);\n            }\n        },\n        aeVegasMarkeReferee: async function (ctAddress, address) {\n            try {\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                DRY_RUN_ACCOUNT.pub = address;\n                const { decodedResult: marketReferee } =\n                    await vegasContract.methods.get_markets_referee();\n                // console.log(marketStart);\n\n                console.log(this.mapToArray(marketReferee));\n                this.responseSuccess(\n                    \"aeVegasMarkeReferee\",\n                    this.mapToArray(marketReferee)\n                );\n            } catch (e) {\n                this.responseError(\"aeVegasMarkeReferee\", e.message);\n            }\n        },\n\n        aeVegasMarketRecords: async function (ctAddress, address) {\n            try {\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                DRY_RUN_ACCOUNT.pub = address;\n                const { decodedResult: marketRecords } =\n                    await vegasContract.methods.get_market_records(address);\n                console.log(marketRecords);\n                this.responseSuccess(\"aeVegasMarketRecords\", marketRecords);\n            } catch (e) {\n                this.responseError(\"aeVegasMarketRecords\", e.message);\n            }\n        },\n\n        aeVegasMarketDetail: async function (ctAddress, address, owner, marketId) {\n            try {\n                let vegasContract = await aeSdk.getContractInstance({\n                    aci: VegasMarketContract,\n                    contractAddress: ctAddress,\n                });\n\n                DRY_RUN_ACCOUNT.pub = address;\n                const { decodedResult: marketDetail } =\n                    await vegasContract.methods.get_market_detail(owner, marketId);\n\n                marketDetail.get_aggregator_user = this.mapToArray(\n                    marketDetail.get_aggregator_user\n                );\n                marketDetail.get_oracle_market_record = this.mapToArray(\n                    marketDetail.get_oracle_market_record\n                );\n                this.responseSuccess(\"aeVegasMarketDetail\", marketDetail);\n            } catch (e) {\n                this.responseError(\"aeVegasMarketDetail\", e.message);\n            }\n        },\n\n        responseSuccess: async function (name, data) {\n            const jsonData = {\n                code: 200,\n                message: \"\",\n                name: name,\n                result: data,\n            };\n            console.log(\n                JSON.stringify(jsonData, (_, v) =>\n                    typeof v === \"bigint\" ? v.toString() : v\n                )\n            );\n            let channelResultData = JSON.stringify(jsonData, (_, v) =>\n                typeof v === \"bigint\" ? v.toString() : v\n            );\n            this.msg = channelResultData;\n            // eslint-disable-next-line no-undef\n            // channelResultDataJS.postMessage(channelResultData);\n            window.flutter_inappwebview.callHandler('channelResultDataJS', channelResultData);\n        },\n\n        responseError: async function (name, msg) {\n            console.log(msg);\n            //如果nonce 混乱,发送0余额到自己,重置nonce\n            if (msg.toString().includes(\"is too high, valid nonce is\")) {\n                let nonce = msg.toString().split(\"is too high, valid nonce is \")[1];\n                console.log(\"包含\");\n                console.log(nonce);\n                let publicKey = await aeSdk.address();\n                console.log(publicKey);\n                await aeSdk.spend(0, publicKey, {\n                    denomination: AE_AMOUNT_FORMATS.AE,\n                    payload: \"Clear Nonce last\",\n                    nonce: nonce,\n                });\n            }\n            const jsonData = {\n                code: 500,\n                name: name,\n                message: msg,\n            };\n\n            let channelResultData = JSON.stringify(jsonData, (_, v) =>\n                typeof v === \"bigint\" ? v.toString() : v\n            );\n            this.msg = channelResultData;\n            console.log(jsonData);\n            // eslint-disable-next-line no-undef\n            // channelResultDataJS.postMessage(channelResultData);\n            window.flutter_inappwebview.callHandler('channelResultDataJS', channelResultData);\n        },\n\n        mapToArray(map) {\n            var list = [];\n\n            map = this.mapToObject(map);\n            for (var key in map) {\n                var value = map[key];\n                list.push({ key: key, value: value });\n            }\n\n            return list;\n        },\n\n        mapToObject(strMap) {\n            let obj = Object.create(null);\n            for (let [k, v] of strMap) {\n                obj[k] = v;\n            }\n            return obj;\n        },\n    },\n};\n</script>\n\n","import { render } from \"./ae.vue?vue&type=template&id=2a911ead\"\nimport script from \"./ae.vue?vue&type=script&lang=js\"\nexport * from \"./ae.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/sunbaixin/Documents/box/git/box-wallet-sdk/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n   </div>\n</template>\n\n<script>\nexport default {\n  name: 'CFX',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n","import { render } from \"./cfx.vue?vue&type=template&id=0c2466ba\"\nimport script from \"./cfx.vue?vue&type=script&lang=js\"\nexport * from \"./cfx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/sunbaixin/Documents/box/git/box-wallet-sdk/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=0f78e837\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=0f78e837&lang=css\"\n\nimport exportComponent from \"/Users/sunbaixin/Documents/box/git/box-wallet-sdk/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkbox_wallet_sdk\"] = self[\"webpackChunkbox_wallet_sdk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4657); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createVNode","_component_AE","_component_CFX","msg","_createElementVNode","_createElementBlock","$data","_hoisted_1","rows","cols","$event","_hoisted_2","onClick","$options","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","bip39","require","Base64","node","Node","aeSdk","AeSdk","nodes","name","instance","data","textData","runningInFrame","window","parent","input","formatData","async","json","this","channelCall","methods","debug","formatAmount","amount","ethers","appData","JSON","parse","console","log","aeGetCurrentHeight","aeGenerateAccount","aeSetNodeUrl","params","url","aeBalance","address","aeRestoreAccountMnemonic","mnemonic","aeRestoreAccountSecretKey","secretKey","aeSpend","receiveAddress","payload","aeAensUpdate","aeAensClaim","aeAensTransfer","recipient","aeAex9TokenBalance","ctAddress","aeAex9TokenTransfer","toAddress","aeAex9TokenAllowance","forAddress","aeAex9TokenCreateAllowance","aeVegasgetAggregatorUser","aeVegasAddMarket","content","sourceUrl","minAmount","overHeight","results","aeVegasUpdateConfig","config","aeVegasMarketDetail","owner","marketId","aeVegasMarketStart","isSelf","aeVegasMarkeReferee","aeVegasMarketRecords","aeVegasSubmitAnswer","selectIndex","aeVegasProvideAnswer","marketType","aeVegasStopMarket","aeVegasReceiveReward","aeAensMarketPutName","height","aeAensMarketGetNameMaxPrice","aeAensMarketIsCallerExists","aeAensMarketRevokedName","aeAensMarketRaiseName","aeAensMarketAddTradableAddress","aeAensMarketIsTradableAddress","aeAensMarketDealName","aeAensMarketGetNameOrder","aeAensMarketGetNameNextRaisePrice","leftAmount","aeAensMarketGetNamesOrder","aeAensMarketGetNameRecords","aeDexSwapExactAeForTokens","amountAe","amountOutTokenMin","path","to","deadline","aeDexSwapExactTokensForAe","amountToken","amountOutAeMin","aeDexSwapExactTokensForTokens","amountTokenIn","aeDexAddLiquidityAe","token","amountTokenDesired","amountTokenMin","amountAeMin","aeDexRemoveLiquidityAe","liquidity","aeDexAddLiquidity","tokenA","tokenB","amountTokenDesiredA","amountTokenDesiredB","amountTokenMinA","amountTokenMinB","aeDexRemoveLiquidity","initAeSdk","publicKey","getAddressFromPriv","senderAccount","MemoryAccount","keypair","addAccount","select","delegationSignature","createAensDelegationSignature","aensMarketContract","getContractInstance","aci","AensMarketContract","contractAddress","decodedResult","maxPrice","get_name_max_price","payAmount","toAettos","Number","decodedEvents","put_name","responseSuccess","e","responseError","message","AedexV2RouterContract","swapResult","swap_exact_ae_for_tokens","undefined","gas","omitUnknown","result","swap_exact_tokens_for_ae","swap_exact_tokens_for_tokens","add_liquidity_ae","hash","add_liquidity","remove_liquidity_ae","remove_liquidity","DRY_RUN_ACCOUNT","is_caller_exists","revoked_name","raise_name","deal_name","add_tradable_address","is_tradable_address","nextNameRaisePrice","get_name_next_raise_price","parseInt","nameOrders","get_names_order","mapToArray","nameOrder","get_name_order","records","get_name_records","generateMnemonic","seed","mnemonicToSeed","wallet","getHdWalletAccountFromSeed","validateMnemonic","balance","getBalance","spendTxResult","spend","denomination","AE_AMOUNT_FORMATS","decode","nameInfo","api","getNameEntryByName","pointers","account_pubkey","aensUpdate","getNameInfo","preClaimTx","aensPreclaim","claimTx","aensClaim","salt","verify","waitMined","aensTransfer","aex9Contract","Aex9TokenContract","metaInfoResult","meta_info","balanceResult","decimals","balanceTx","transfer","toString","replace","tx","create_allowance","includes","change_allowance","metaInfo","currentAllowance","allowance","from_account","for_account","vegasContract","VegasMarketContract","getAggregatorUserTx","get_aggregator_user","getAggregatorUser","addMarketTx","update_config","addMarket","add_market","submit_answer","provideAnswerTx","private_update_market_progress_to_over","provide_answer","provideAnswer","stopMarketTx","stop_market","stopMarket","receiveRewardTx","receive_reward","receiveReward","marketStart","get_markets_start","marketReferee","get_markets_referee","marketRecords","get_market_records","marketDetail","get_market_detail","get_oracle_market_record","jsonData","code","stringify","_","v","channelResultData","flutter_inappwebview","callHandler","nonce","split","map","list","key","mapToObject","value","push","strMap","obj","Object","create","k","__exports__","class","$props","props","String","components","AE","CFX","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}